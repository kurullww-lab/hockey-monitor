import asyncio
import logging
import json
import requests
import sqlite3
import os
from bs4 import BeautifulSoup
from datetime import datetime
from flask import Flask, request
from threading import Thread
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
URL = "https://hcdinamo.by/tickets/"
BOT_TOKEN = "8416784515:AAG1yGWcgm9gGFPJLodfLvEJrtmIFVJjsu8"
STATE_FILE = "matches_state.json"
CHECK_INTERVAL = 300
PING_INTERVAL = 240
ADMIN_ID = "645388044"

logging.basicConfig(
    level=logging.INFO, 
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt='%Y-%m-%d %H:%M:%S'
)

app = Flask(__name__)

# ========== –ö–†–ê–°–ò–í–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ==========

def format_beautiful_date(date_string):
    """–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –º–∞—Ç—á–∞"""
    try:
        # –ü—Ä–∏–º–µ—Ä: "22 17:00" -> "22 –æ–∫—Ç—è–±—Ä—è 2025 17:00"
        parts = date_string.split()
        if len(parts) >= 2:
            day = parts[0]
            time = parts[1]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –∏ –º–µ—Å—è—Ü
            current_year = datetime.now().year
            current_month = datetime.now().month
            months_ru = [
                '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
                '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
            ]
            month_name = months_ru[current_month - 1]
            
            return f"üóì {day} {month_name} {current_year} ‚è∞ {time}"
        
        return f"üìÖ {date_string}"
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")
        return f"üìÖ {date_string}"

def create_beautiful_message(match):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–∞—Ç—á–µ"""
    beautiful_date = format_beautiful_date(match["date"])
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    title = match['title']
    if ' ‚Äî ' in title:
        home_team, away_team = title.split(' ‚Äî ')
        formatted_title = f"üèí {home_team} vs {away_team}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞—Ç—á–∞ (–¥–æ–º–∞—à–Ω–∏–π/–≤—ã–µ–∑–¥–Ω–æ–π)
        if '–î–∏–Ω–∞–º–æ-–ú–∏–Ω—Å–∫' in title:
            if title.startswith('–î–∏–Ω–∞–º–æ-–ú–∏–Ω—Å–∫'):
                match_type = "üè† –î–æ–º–∞—à–Ω–∏–π –º–∞—Ç—á"
            else:
                match_type = "‚úàÔ∏è –í—ã–µ–∑–¥–Ω–æ–π –º–∞—Ç—á"
        else:
            match_type = "üèí –•–æ–∫–∫–µ–π–Ω—ã–π –º–∞—Ç—á"
    else:
        formatted_title = f"üèí {title}"
        match_type = "üèí –•–æ–∫–∫–µ–π–Ω—ã–π –º–∞—Ç—á"
    
    message = (
        "üîî <b>–ù–û–í–´–ô –ú–ê–¢–ß –í –ü–†–û–î–ê–ñ–ï!</b>\n\n"
        f"{formatted_title}\n"
        f"{match_type}\n"
        f"{beautiful_date}\n\n"
        f"üéü <a href='{match['url']}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã</a>\n\n"
        "‚ö°Ô∏è <i>–£—Å–ø–µ–π –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞!</i>"
    )
    return message

def create_removed_message(match):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–Ω–æ–º –º–∞—Ç—á–µ"""
    beautiful_date = format_beautiful_date(match["date"])
    
    title = match['title']
    if ' ‚Äî ' in title:
        home_team, away_team = title.split(' ‚Äî ')
        formatted_title = f"üèí {home_team} vs {away_team}"
    else:
        formatted_title = f"üèí {title}"
    
    message = (
        "‚ùå <b>–ú–ê–¢–ß –£–î–ê–õ–ï–ù –ò–ó –ü–†–û–î–ê–ñ–ò!</b>\n\n"
        f"{formatted_title}\n"
        f"{beautiful_date}\n\n"
        "üòî <i>–ë–∏–ª–µ—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã</i>"
    )
    return message

# ========== –ê–í–¢–û-–ü–ò–ù–ì –°–ò–°–¢–ï–ú–ê ==========

def start_ping_service():
    """–§–æ–Ω–æ–≤–∞—è —Å–ª—É–∂–±–∞ –¥–ª—è –ø–∏–Ω–≥–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è"""
    def ping_loop():
        service_url = "https://hockey-monitor.onrender.com/health"
        while True:
            try:
                response = requests.get(service_url, timeout=10)
                logging.info(f"üèì –ê–≤—Ç–æ-–ø–∏–Ω–≥: {response.status_code}")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–ø–∏–Ω–≥–∞: {e}")
            time.sleep(PING_INTERVAL)
    
    ping_thread = Thread(target=ping_loop, daemon=True)
    ping_thread.start()
    logging.info("üîî –°–ª—É–∂–±–∞ –∞–≤—Ç–æ-–ø–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")

# ========== WEB –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò ==========

@app.route('/')
def home():
    return "üèí Hockey Monitor Bot is running!"

@app.route('/health')
def health():
    return {"status": "running", "timestamp": datetime.now().isoformat()}

@app.route('/debug')
def debug():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ª–∞–¥–∫–∏"""
    subscribers = load_subscribers()
    
    html = f"""
    <html>
        <head><title>Debug Info</title><meta charset="utf-8"></head>
        <body>
            <h1>üèí Debug Information</h1>
            <h2>üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</h2>
            <ul>
    """
    
    for sub in subscribers:
        html += f"<li><b>{sub}</b> {'(ADMIN)' if sub == ADMIN_ID else ''}</li>"
    
    html += f"""
            </ul>
            <p><b>–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {len(subscribers)}</p>
            <p><b>ADMIN_ID:</b> {ADMIN_ID}</p>
            <hr>
            <p><a href="/test_send_all">üì§ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º</a></p>
            <p><a href="/subscribers">üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (JSON)</a></p>
        </body>
    </html>
    """
    
    return html

@app.route('/test_send_all')
def test_send_all():
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    subscribers = load_subscribers()
    results = []
    
    for chat_id in subscribers:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": "üîî <b>–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –î–õ–Ø –í–°–ï–•</b>\n\n–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ",
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        try:
            response = requests.post(url, json=data, timeout=10)
            results.append(f"{chat_id}: {response.status_code}")
        except Exception as e:
            results.append(f"{chat_id}: –û—à–∏–±–∫–∞ - {e}")
    
    return "<br>".join(results)

@app.route('/subscribers')
def list_subscribers():
    """JSON —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    subscribers = load_subscribers()
    return {
        "total_subscribers": len(subscribers),
        "subscribers": subscribers
    }

@app.route('/add_subscriber/<chat_id>')
def add_sub_manual(chat_id):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤—Ä—É—á–Ω—É—é"""
    if add_subscriber(chat_id, "manual"):
        return f"‚úÖ –ü–æ–¥–ø–∏—Å—á–∏–∫ {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω. <a href='/debug'>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ç–ª–∞–¥–∫–µ</a>"
    return f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {chat_id}"

# ========== TELEGRAM WEBHOOK ==========

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∏–∑ Telegram"""
    try:
        data = request.get_json()
        
        if 'message' in data:
            chat_id = str(data['message']['chat']['id'])
            text = data['message'].get('text', '')
            username = data['message']['chat'].get('username', '')
            
            logging.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id} ({username}): {text}")
            
            if text == '/start':
                if add_subscriber(chat_id, username):
                    send_telegram_sync(chat_id, 
                        "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ö–æ–∫–∫–µ–π–Ω—ã—Ö –º–∞—Ç—á–∞—Ö!\n\n"
                        "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –º–∞—Ç—á–∏ –≤ –ø—Ä–æ–¥–∞–∂–µ –Ω–∞ hcdinamo.by"
                    )
                else:
                    send_telegram_sync(chat_id, "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    
            elif text == '/stop':
                if remove_subscriber(chat_id):
                    send_telegram_sync(chat_id, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                else:
                    send_telegram_sync(chat_id, "‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    
            elif text == '/status':
                subscribers = load_subscribers()
                if chat_id in subscribers:
                    send_telegram_sync(chat_id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                else:
                    send_telegram_sync(chat_id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    
            elif text == '/debug':
                subscribers = load_subscribers()
                status = "‚úÖ –ø–æ–¥–ø–∏—Å–∞–Ω" if chat_id in subscribers else "‚ùå –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
                send_telegram_sync(chat_id, 
                    f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                    f"ID: {chat_id}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}\n"
                    f"–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}"
                )
        
        return 'OK'
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return 'ERROR'

def send_telegram_sync(chat_id, text):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        response = requests.post(url, json=data, timeout=10)
        if response.status_code == 200:
            logging.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {chat_id}")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {response.text}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

# ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

def init_db():
    conn = sqlite3.connect('subscribers.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS subscribers (chat_id TEXT PRIMARY KEY, username TEXT)''')
    conn.commit()
    conn.close()

def load_subscribers():
    try:
        conn = sqlite3.connect('subscribers.db')
        c = conn.cursor()
        c.execute("SELECT chat_id FROM subscribers")
        subscribers = [row[0] for row in c.fetchall()]
        conn.close()
        return subscribers
    except:
        return []

def add_subscriber(chat_id, username=""):
    try:
        conn = sqlite3.connect('subscribers.db')
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO subscribers (chat_id, username) VALUES (?, ?)", 
                 (chat_id, username))
        conn.commit()
        conn.close()
        logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id} ({username})")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")
        return False

def remove_subscriber(chat_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
    try:
        conn = sqlite3.connect('subscribers.db')
        c = conn.cursor()
        c.execute("DELETE FROM subscribers WHERE chat_id = ?", (chat_id,))
        conn.commit()
        conn.close()
        logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id}")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")
        return False

async def send_telegram(text: str):
    subscribers = load_subscribers()
    for chat_id in subscribers:
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            data = {
                "chat_id": chat_id, 
                "text": text, 
                "parse_mode": "HTML",
                "disable_web_page_preview": True
            }
            response = requests.post(url, json=data, timeout=10)
            if response.status_code == 200:
                logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {chat_id}")
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {chat_id}: {response.text}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")

async def fetch_matches():
    try:
        logging.info("üåç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ç—á–∏...")
        response = requests.get(URL, timeout=30, headers={
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, "html.parser")
        matches = []
        for item in soup.select("a.match-item"):
            title = item.select_one("div.match-title")
            date = item.select_one("div.match-day")
            time = item.select_one("div.match-times")
            if title and date and time:
                href = item.get("href", URL)
                if href.startswith("/"):
                    href = "https://hcdinamo.by" + href
                matches.append({
                    "title": title.text.strip(),
                    "date": f"{date.text.strip()} {time.text.strip()}",
                    "url": href
                })
        
        logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")
        return matches
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return []

async def monitor():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    init_db()
    
    if ADMIN_ID not in load_subscribers():
        add_subscriber(ADMIN_ID, "admin")
        logging.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –∞–¥–º–∏–Ω: {ADMIN_ID}")
    
    subscribers = load_subscribers()
    logging.info(f"üë• –¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {subscribers}")
    
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            old_matches = json.load(f)
    except:
        old_matches = []
    
    logging.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –º–∞—Ç—á–µ–π: {len(old_matches)}")
    
    start_ping_service()
    
    while True:
        try:
            new_matches = await fetch_matches()
            if new_matches:
                old_titles = {m["title"] for m in old_matches}
                new_titles = {m["title"] for m in new_matches}
                
                added = new_titles - old_titles
                removed = old_titles - new_titles
                
                if added or removed:
                    logging.info(f"‚ú® –ò–∑–º–µ–Ω–µ–Ω–∏—è: +{len(added)}, -{len(removed)}")
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö
                    for match in new_matches:
                        if match["title"] in added:
                            msg = create_beautiful_message(match)
                            await send_telegram(msg)
                            await asyncio.sleep(1)
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö
                    for match in old_matches:
                        if match["title"] in removed:
                            msg = create_removed_message(match)
                            await send_telegram(msg)
                            await asyncio.sleep(1)
                    
                    try:
                        with open(STATE_FILE, "w", encoding="utf-8") as f:
                            json.dump(new_matches, f, ensure_ascii=False, indent=2)
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                    
                    old_matches = new_matches
                else:
                    logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
            
            await asyncio.sleep(CHECK_INTERVAL)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(60)

def run_web_server():
    logging.info("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 5000...")
    app.run(host='0.0.0.0', port=5000, debug=False)

def main():
    web_thread = Thread(target=run_web_server, daemon=True)
    web_thread.start()
    
    time.sleep(3)
    logging.info("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
    
    asyncio.run(monitor())

if __name__ == "__main__":
    main()
