import os
import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from bs4 import BeautifulSoup
from aiohttp import web

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
BASE_URL = os.getenv("RENDER_EXTERNAL_URL", "https://hockey-monitor.onrender.com")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{BASE_URL}{WEBHOOK_PATH}"
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))
URL = "https://hcdinamo.by/tickets/"

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === Telegram bot ===
session = AiohttpSession()
bot = Bot(
    token=BOT_TOKEN,
    session=session,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# === –ü–∞–º—è—Ç—å ===
subscribers = set()
last_matches = set()


# === –ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç—á–µ–π ===
async def fetch_matches():
    import aiohttp
    from bs4 import BeautifulSoup
    import logging

    ajax_url = "https://hcdinamo.by/local/ajax/tickets_list.php"
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/120.0.0.0 Safari/537.36"
        ),
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Accept-Language": "ru,en;q=0.9",
        "Referer": "https://hcdinamo.by/tickets/",
        "Connection": "keep-alive",
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(ajax_url, headers=headers) as resp:
            html = await resp.text()
            logging.info(f"üìÑ –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ {resp.status}, –¥–ª–∏–Ω–∞ HTML: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")

    soup = BeautifulSoup(html, "html.parser")
    match_items = soup.select("a.match-item")
    logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ a.match-item: {len(match_items)}")

    matches = set()
    for item in match_items:
        try:
            day = item.select_one(".match-day").get_text(strip=True)
            month = item.select_one(".match-month").get_text(strip=True)
            time_ = item.select_one(".match-times").get_text(strip=True)
            title = item.select_one(".match-title").get_text(strip=True)
            ticket_btn = item.select_one(".btn.tickets-w_t")
            ticket_url = ticket_btn["data-w_t"] if ticket_btn else None

            match_text = f"{day} {month}, {time_} ‚Äî {title}"
            matches.add((match_text, ticket_url))
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Ç—á–∞: {e}")

    return matches


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π ===
async def monitor_matches():
    global last_matches
    await asyncio.sleep(5)
    logging.info("üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π –∑–∞–ø—É—â–µ–Ω!")
    while True:
        try:
            current = await fetch_matches()
            added = current - last_matches
            removed = last_matches - current

            if added or removed:
                logging.info(f"üîî –ò–∑–º–µ–Ω–µ–Ω–∏—è: +{len(added)} / -{len(removed)}")
                await notify_changes(added, removed)
                last_matches = current
            else:
                logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
        await asyncio.sleep(CHECK_INTERVAL)


# === –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
async def notify_changes(added, removed):
    if not subscribers:
        logging.info("‚ùï –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return

    for chat_id in subscribers:
        # –ù–æ–≤—ã–µ –º–∞—Ç—á–∏
        for match, ticket_url in added:
            text = f"üÜï –ù–æ–≤—ã–π –º–∞—Ç—á –¥–æ–±–∞–≤–ª–µ–Ω!\n{match}"
            if ticket_url:
                text += f"\nüéü <a href='{ticket_url}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"
            await bot.send_message(chat_id, text)

        # –£–¥–∞–ª—ë–Ω–Ω—ã–µ (–Ω–∞—á–∞–≤—à–∏–µ—Å—è)
        for match, _ in removed:
            text = f"‚è± –ú–∞—Ç—á –Ω–∞—á–∞–ª—Å—è (—É–¥–∞–ª—ë–Ω —Å —Å–∞–π—Ç–∞):\n{match}"
            await bot.send_message(chat_id, text)


# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    subscribers.add(message.chat.id)
    await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫! üèí")

    matches = await fetch_matches()
    if matches:
        for match, ticket in matches:
            msg = f"üìÖ {match}"
            if ticket:
                msg += f"\nüéü <a href='{ticket}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"
            await bot.send_message(message.chat.id, msg)
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π.")


@dp.message(Command("stop"))
async def stop_cmd(message: types.Message):
    subscribers.discard(message.chat.id)
    await message.answer("‚õî –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")


# === Webhook —Å–µ—Ä–≤–µ—Ä ===
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    asyncio.create_task(monitor_matches())
    logging.info(f"üåç Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.session.close()


async def handle_root(request):
    """–ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Render –∏ Telegram"""
    return web.Response(text="‚úÖ Hockey Monitor Bot is running")


def main():
    app = web.Application()
    app.router.add_get("/", handle_root)  # <-- –≤–æ—Ç —ç—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)

    web.run_app(app, host="0.0.0.0", port=10000)


if __name__ == "__main__":
    main()
