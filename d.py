import os
import json
import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from bs4 import BeautifulSoup
from flask import Flask
import re
from datetime import datetime
import threading

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
URL = "https://hcdinamo.by/tickets/"
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
DATA_FILE = "matches.json"
SUBSCRIBERS_FILE = "subscribers.json"

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
app = Flask(__name__)

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


# === –£–¢–ò–õ–ò–¢–´ ===
def load_json(filename, default):
    if os.path.exists(filename):
        try:
            with open(filename, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            return default
    return default


def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def normalize_text(text):
    return re.sub(r"\s+", " ", text.strip())


def same_match(a, b):
    return a["title"] == b["title"] and a["date"] == b["date"]


# === –ü–û–î–ü–ò–°–ß–ò–ö–ò ===
def get_subscribers():
    return load_json(SUBSCRIBERS_FILE, [])


def add_subscriber(user_id):
    subs = get_subscribers()
    if user_id not in subs:
        subs.append(user_id)
        save_json(SUBSCRIBERS_FILE, subs)
        return True
    return False


# === –ü–ê–†–°–ò–ù–ì –ú–ê–¢–ß–ï–ô ===
def parse_matches(html):
    soup = BeautifulSoup(html, "html.parser")
    items = soup.select("a.match-item")
    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ a.match-item: {len(items)}")

    matches = []
    for item in items:
        title_elem = item.select_one(".match-title, .match__title, h3, .title")
        title = normalize_text(title_elem.get_text()) if title_elem else ""

        date_elem = item.select_one(".match-day, .match-date, .match__info, time")
        date_text = normalize_text(date_elem.get_text()) if date_elem else ""

        if not date_text:
            full_text = item.get_text(" ", strip=True)
            m = re.search(r"(\d{1,2}\s[–∞-—è–ê-–Ø]+|\d{1,2}\.\d{1,2}\.\d{4}).*?(\d{1,2}:\d{2})", full_text)
            if m:
                date_text = f"{m.group(1)} {m.group(2)}"

        href = item.get("href", "")
        if href and href.startswith("/"):
            href = f"https://hcdinamo.by{href}"

        if title and date_text:
            matches.append({
                "title": title,
                "date": date_text,
                "url": href or URL
            })
    return matches


# === –†–ê–°–°–´–õ–ö–ê ===
async def broadcast(text):
    users = get_subscribers()
    success, failed = 0, 0
    for user_id in users:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            success += 1
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")
            failed += 1
    logger.info(f"üìä –ò—Ç–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏: ‚úÖ {success} / ‚ùå {failed}")


# === –ú–û–ù–ò–¢–û–†–ò–ù–ì ===
async def monitor():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Dinamo Tickets")
    prev_matches = load_json(DATA_FILE, [])
    logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –º–∞—Ç—á–µ–π: {len(prev_matches)}")

    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(URL) as resp:
                    html = await resp.text()

            matches = parse_matches(html)
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")

            added = [m for m in matches if not any(same_match(m, p) for p in prev_matches)]
            removed = [p for p in prev_matches if not any(same_match(p, m) for m in matches)]

            if added or removed:
                msg_parts = []
                if added:
                    msg_parts.append("‚ûï *–î–æ–±–∞–≤–ª–µ–Ω—ã –º–∞—Ç—á–∏:*\n" + "\n".join(
                        f"‚Ä¢ [{m['title']} ({m['date']})]({m['url']})" for m in added
                    ))
                if removed:
                    msg_parts.append("‚ûñ *–£–¥–∞–ª–µ–Ω—ã –º–∞—Ç—á–∏:*\n" + "\n".join(
                        f"‚Ä¢ {m['title']} ({m['date']})" for m in removed
                    ))

                message = "\n\n".join(msg_parts)
                await broadcast(message)
                prev_matches = matches
                save_json(DATA_FILE, matches)
            else:
                logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

        logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL // 60} –º–∏–Ω.")
        await asyncio.sleep(CHECK_INTERVAL)


# === TELEGRAM –•–ï–ù–î–õ–ï–†–´ ===
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    added = add_subscriber(message.chat.id)
    if added:
        await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö Dinamo Minsk!")
        await bot.send_message(message.chat.id, "–Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –º–∞—Ç—á–∏ üéØ")
    else:
        await message.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã üîî")


@dp.message(Command("unsubscribe"))
async def unsubscribe_handler(message: types.Message):
    subs = get_subscribers()
    if message.chat.id in subs:
        subs.remove(message.chat.id)
        save_json(SUBSCRIBERS_FILE, subs)
        await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")


@dp.message(Command("matches"))
async def matches_handler(message: types.Message):
    matches = load_json(DATA_FILE, [])
    if not matches:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π.")
        return
    text = "*–¢–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏:*\n" + "\n".join(
        f"‚Ä¢ [{m['title']} ({m['date']})]({m['url']})" for m in matches
    )
    await message.answer(text, parse_mode="Markdown", disable_web_page_preview=True)


# === FLASK –î–õ–Ø Render ===
@app.route("/")
def home():
    return "üèí Hockey Monitor Bot –∞–∫—Ç–∏–≤–µ–Ω!", 200


@app.route("/health")
def health():
    return "OK", 200


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    def run_flask():
        port = int(os.getenv("PORT", 10000))
        logger.info(f"üåê Flask –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        app.run(host="0.0.0.0", port=port)

    threading.Thread(target=run_flask, daemon=True).start()

    async def main():
        asyncio.create_task(monitor())
        await dp.start_polling(bot)

    asyncio.run(main())
