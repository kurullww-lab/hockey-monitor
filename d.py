import os
import time
import logging
import asyncio
import requests
from bs4 import BeautifulSoup
from datetime import datetime
from aiogram import Bot
from flask import Flask

# --------------------------------------------
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# --------------------------------------------
URL = "https://hcdinamo.by/tickets/"
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "8416784515:AAG1yGWcgm9gGFPJLodfLvEJrtmIFVJjsu8")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "")
STATE_FILE = "matches.txt"

# --------------------------------------------
# ‚öôÔ∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# --------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger()

# --------------------------------------------
# üß† –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# --------------------------------------------
def load_previous_matches():
    if os.path.exists(STATE_FILE):
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return set(f.read().splitlines())
    return set()


def save_current_matches(matches):
    with open(STATE_FILE, "w", encoding="utf-8") as f:
        for match in matches:
            f.write(f"{match}\n")


async def send_telegram_message(bot, message: str):
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        logger.warning("‚ö†Ô∏è TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return
    try:
        await bot.send_message(TELEGRAM_CHAT_ID, message)
        logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

# --------------------------------------------
# üóìÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã (—É—á—ë—Ç –º–µ—Å—è—Ü–∞)
# --------------------------------------------
def parse_match_date(day_str: str, current_month: int):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É, —É—á–∏—Ç—ã–≤–∞—è —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
    try:
        now = datetime.now()
        parts = day_str.strip().split()
        if len(parts) == 2:
            day_part, time_part = parts
            day = int(day_part)
            hour, minute = map(int, time_part.split(":"))
            date_obj = datetime(now.year, current_month, day, hour, minute)
            logger.info(f"‚úÖ –î–∞—Ç–∞ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞: {date_obj.strftime('%d.%m.%Y %H:%M')}")
            return date_obj
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{day_str}': {e}")
        return None


# --------------------------------------------
# üåç –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Å —Å–∞–π—Ç–∞
# --------------------------------------------
async def fetch_matches():
    logger.info("üåç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
    try:
        response = requests.get(URL, timeout=15)
        response.raise_for_status()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return []

    soup = BeautifulSoup(response.text, "html.parser")
    matches = []

    # –ú–µ—Å—è—Ü—ã
    current_month = datetime.now().month
    month_map = {
        "—è–Ω–≤–∞—Ä—å": 1, "—Ñ–µ–≤—Ä–∞–ª—å": 2, "–º–∞—Ä—Ç": 3, "–∞–ø—Ä–µ–ª—å": 4, "–º–∞–π": 5,
        "–∏—é–Ω—å": 6, "–∏—é–ª—å": 7, "–∞–≤–≥—É—Å—Ç": 8, "—Å–µ–Ω—Ç—è–±—Ä—å": 9,
        "–æ–∫—Ç—è–±—Ä—å": 10, "–Ω–æ—è–±—Ä—å": 11, "–¥–µ–∫–∞–±—Ä—å": 12
    }

    for element in soup.select(".matches-list > *"):
        text = element.get_text(strip=True).lower()

        # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞
        for rus_month, num in month_map.items():
            if rus_month in text:
                current_month = num
                logger.info(f"üìÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –º–µ—Å—è—Ü: {rus_month} ({num})")
                break

        # –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Ç—á
        if element.name == "a" and "match-item" in element.get("class", []):
            title = element.get_text(strip=True)
            date_tag = element.select_one(".match-day")
            if not date_tag:
                continue

            date_text = date_tag.get_text(strip=True)
            logger.info(f"üîß –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É: '{date_text}' (–º–µ—Å—è—Ü {current_month})")

            match_date = parse_match_date(date_text, current_month)
            if not match_date:
                continue

            matches.append({
                "title": title,
                "date": match_date.strftime("%Y-%m-%d %H:%M")
            })

    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")
    return matches


# --------------------------------------------
# üîÅ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# --------------------------------------------
async def monitor():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Dinamo Tickets (requests-only –≤–µ—Ä—Å–∏—è)")
    bot = Bot(token=TELEGRAM_TOKEN)
    previous_matches = load_previous_matches()
    logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –º–∞—Ç—á–µ–π: {len(previous_matches)}")

    while True:
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ {datetime.now().strftime('%H:%M:%S')}...")
        matches = await fetch_matches()
        current_titles = {m['title'] for m in matches if 'title' in m}

        new_matches = current_titles - previous_matches
        if new_matches:
            logger.info(f"üÜï –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –º–∞—Ç—á–∏: {len(new_matches)}")
            message = "üèí –ù–æ–≤—ã–µ –º–∞—Ç—á–∏ –¥–æ—Å—Ç—É–ø–Ω—ã:\n" + "\n".join(new_matches)
            await send_telegram_message(bot, message)
            save_current_matches(current_titles)
            previous_matches = current_titles
        else:
            logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")

        logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL // 60} –º–∏–Ω.")
        await asyncio.sleep(CHECK_INTERVAL)


# --------------------------------------------
# üåê Flask web-—Å–µ—Ä–≤–µ—Ä (–¥–ª—è Render ping)
# --------------------------------------------
app = Flask(__name__)

@app.route("/")
def home():
    return "Dinamo Tickets Monitor is running!"

@app.route("/health")
def health():
    logger.info("üèì –ê–≤—Ç–æ-–ø–∏–Ω–≥: 200")
    return "OK", 200


# --------------------------------------------
# üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# --------------------------------------------
if __name__ == "__main__":
    from threading import Thread

    # –û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è Flask
    def run_flask():
        port = int(os.environ.get("PORT", 5000))
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
        app.run(host="0.0.0.0", port=port)

    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    asyncio.run(monitor())
