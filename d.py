import os
import asyncio
import logging
import threading
from flask import Flask, request
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Update
from aiogram.client.default import DefaultBotProperties
from bs4 import BeautifulSoup

# ---------------------- CONFIG ----------------------
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "300"))  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
URL = "https://hcdinamo.by/matchi/"  # —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –º–∞—Ç—á–∞–º–∏

# ---------------------- LOGGING ----------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ---------------------- INIT BOT ----------------------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

app = Flask(__name__)
matches_cache = set()
subscribers_file = "subscribers.txt"


# ---------------------- UTILS ----------------------
def load_subscribers():
    if not os.path.exists(subscribers_file):
        return set()
    with open(subscribers_file, "r") as f:
        return set(f.read().splitlines())


def save_subscriber(user_id):
    subs = load_subscribers()
    subs.add(str(user_id))
    with open(subscribers_file, "w") as f:
        f.write("\n".join(subs))


# ---------------------- PARSING ----------------------
def fetch_matches():
    """–ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç—á–µ–π —Å —Å–∞–π—Ç–∞"""
    response = requests.get(URL)
    if response.status_code != 200:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ({response.status_code})")
        return []

    soup = BeautifulSoup(response.text, "html.parser")
    match_titles = [div.get_text(strip=True) for div in soup.select("div.match-title")]
    logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(match_titles)}")
    return match_titles


# ---------------------- MATCH MONITOR ----------------------
async def monitor_matches():
    global matches_cache
    await asyncio.sleep(5)
    logging.info("üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π –∑–∞–ø—É—â–µ–Ω!")

    while True:
        try:
            current_matches = set(fetch_matches())

            added = current_matches - matches_cache
            removed = matches_cache - current_matches

            if added or removed:
                msg = "‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π:\n"
                if added:
                    msg += f"\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ:\n" + "\n".join(added)
                if removed:
                    msg += f"\n‚ûñ –£–¥–∞–ª–µ–Ω–æ:\n" + "\n".join(removed)

                logging.info(f"‚ö° –ò–∑–º–µ–Ω–µ–Ω–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(added)}, —É–¥–∞–ª–µ–Ω–æ {len(removed)}")

                for user_id in load_subscribers():
                    try:
                        await bot.send_message(user_id, msg)
                    except Exception as e:
                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")

            else:
                logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")

            matches_cache = current_matches
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")

        await asyncio.sleep(CHECK_INTERVAL)


# ---------------------- HANDLERS ----------------------
@dp.message()
async def handle_message(message: types.Message):
    if message.text == "/start":
        save_subscriber(message.from_user.id)
        matches = fetch_matches()
        msg = f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!\n–ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}"
        await message.answer(msg)
        logging.info(f"üìù –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {message.from_user.id}")

    elif message.text == "/stop":
        subs = load_subscribers()
        subs.discard(str(message.from_user.id))
        with open(subscribers_file, "w") as f:
            f.write("\n".join(subs))
        await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        logging.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø–∏—Å–∞–ª—Å—è.")


# ---------------------- WEBHOOK ----------------------
@app.post("/webhook")
async def webhook():
    try:
        data = request.json  # dict
        update = Update(**data)  # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º dict –≤ Update
        await dp.feed_update(bot, update)
        return "OK"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return "Error", 500


@app.get("/")
def index():
    return "‚úÖ Hockey Monitor Bot is running"


# ---------------------- MAIN ----------------------
async def main():
    logging.info("üöÄ Starting application...")

    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    webhook_url = "https://hockey-monitor.onrender.com/webhook"
    await bot.set_webhook(webhook_url)
    logging.info(f"üåç Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

    # –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(monitor_matches())

    # Flask –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=lambda: app.run(host="0.0.0.0", port=10000), daemon=True).start()

    # aiogram webhook mode
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("‚õî Bot stopped")
