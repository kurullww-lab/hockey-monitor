import os
import time
import asyncio
import logging
import requests
from flask import Flask
from bs4 import BeautifulSoup
from datetime import datetime
from aiogram import Bot

# ==========================
# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ==========================

URL = "https://hcdinamo.by/tickets/"
FALLBACK_URL = "https://r.jina.ai/http://hcdinamo.by/tickets/"
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

app = Flask(__name__)
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_TOKEN)

# ==========================
# üß© –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ==========================

def parse_match_date(text: str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É —Ñ–æ—Ä–º–∞—Ç–∞ '22.11.2025 19:00' –≤ datetime"""
    try:
        return datetime.strptime(text.strip(), "%d.%m.%Y %H:%M")
    except Exception:
        return None


def get_html(url):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –±—Ä–∞—É–∑–µ—Ä–∞"""
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/122.0 Safari/537.36"
        ),
        "Accept-Language": "ru-RU,ru;q=0.9,en;q=0.8",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Referer": "https://google.com/",
        "Connection": "keep-alive"
    }

    try:
        response = requests.get(url, headers=headers, timeout=20)
        response.raise_for_status()
        return response.text
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")
        return ""


async def fetch_matches():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–∞—Ä—Å–∏—Ç –º–∞—Ç—á–∏ (—Å fallback –Ω–∞ –∑–µ—Ä–∫–∞–ª–æ)"""
    logger.info("üåç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")

    html = get_html(URL)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Cloudflare
    if "cf-challenge" in html or "Cloudflare" in html or len(html) < 5000:
        logger.warning("‚ö†Ô∏è Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ ‚Äî –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –∑–µ—Ä–∫–∞–ª–æ...")
        html = get_html(FALLBACK_URL)

    if not html:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTML –Ω–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞, –Ω–∏ —Å –∑–µ—Ä–∫–∞–ª–∞")
        return []

    soup = BeautifulSoup(html, "html.parser")
    elements = soup.select("a.match-item")
    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ a.match-item: {len(elements)}")

    matches = []
    for match in elements:
        title = match.get_text(strip=True)
        date_tag = match.select_one(".match-day")

        if not title or not date_tag:
            continue

        date_text = date_tag.get_text(strip=True)
        match_date = parse_match_date(date_text)
        if not match_date:
            continue

        matches.append({
            "title": title,
            "date": match_date.strftime("%Y-%m-%d %H:%M")
        })

    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")
    return matches


async def send_telegram_message(text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        logger.warning("‚ö†Ô∏è TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return

    try:
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)
        logger.info(f"üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")


async def monitor_matches():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Dinamo Tickets (requests-only –≤–µ—Ä—Å–∏—è)")

    previous = []
    while True:
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ {datetime.now().strftime('%H:%M:%S')}...")
        current = await fetch_matches()

        if not current:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π")
        elif current != previous:
            if not previous:
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –º–∞—Ç—á–µ–π: 0")
            else:
                logger.info("üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
                await send_telegram_message("üÜï –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ Dinamo Tickets!")
            previous = current
        else:
            logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")

        logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL // 60} –º–∏–Ω.\n")
        await asyncio.sleep(CHECK_INTERVAL)

# ==========================
# üåê Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
# ==========================

@app.route("/")
def index():
    return "‚úÖ Dinamo Tickets Monitor is running."

@app.route("/health")
def health():
    return {"status": "ok"}, 200


# ==========================
# üöÄ –ó–∞–ø—É—Å–∫
# ==========================

if __name__ == "__main__":
    port = int(os.getenv("PORT", 10000))
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")

    loop = asyncio.get_event_loop()
    loop.create_task(monitor_matches())

    from threading import Thread
    def run_flask():
        app.run(host="0.0.0.0", port=port)
    Thread(target=run_flask).start()

    loop.run_forever()
