import asyncio
import logging
import threading
import os
import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from flask import Flask

# ==============================
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ==============================
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ–º –∏–∑ TELEGRAM_TOKEN

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
if not BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN environment variable is not set! Please check Render.com environment variables.")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤

MATCHES_URL = "https://hcdinamo.by/tickets/"

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger("hockey_monitor")

# ==============================
# üöÄ Flask Web Server
# ==============================
app = Flask(__name__)

@app.route('/')
def index():
    return "‚úÖ Hockey Monitor Bot is running!"

@app.route('/health')
def health():
    return "OK", 200

# ==============================
# ü§ñ Telegram Bot
# ==============================
try:
    # –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è aiogram 3.17.0+
    bot = Bot(
        token=BOT_TOKEN, 
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher()
    logger.info("‚úÖ Bot initialized successfully")
except Exception as e:
    logger.error(f"‚ùå Failed to initialize bot: {e}")
    raise

subscribers = set()
last_matches = set()

# ==============================
# üèí –ü–∞—Ä—Å–µ—Ä –º–∞—Ç—á–µ–π
# ==============================
def fetch_matches():
    try:
        response = requests.get(MATCHES_URL, timeout=15)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")

        matches = []
        match_elements = soup.select("a.match-item")
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ a.match-item: {len(match_elements)}")
        
        for match in match_elements:
            title = match.select_one(".match-title")
            date_day = match.select_one(".match-day")
            date_month = match.select_one(".match-month")
            time = match.select_one(".match-times")
            ticket_link = match.get("href")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–¥–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç
            title_text = title.get_text(strip=True) if title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            date_text = f"{date_day.get_text(strip=True) if date_day else '?'} {date_month.get_text(strip=True) if date_month else '?'} {time.get_text(strip=True) if time else '?'}"
            
            if ticket_link:
                full_link = ticket_link if ticket_link.startswith("http") else f"https://hcdinamo.by{ticket_link}"
            else:
                full_link = "https://hcdinamo.by/tickets/"

            matches.append({
                "title": title_text,
                "date": date_text,
                "link": full_link
            })

        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")
        return matches
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π: {e}")
        return []

# ==============================
# üì¢ –ö–æ–º–∞–Ω–¥–∞ /start
# ==============================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    subscribers.add(message.chat.id)
    logger.info(f"üìù –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {message.chat.id}")
    
    matches = fetch_matches()

    if not matches:
        await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫!\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π.\nüèí –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
        return

    text_lines = ["–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç—á–∏:"]
    for m in matches:
        text_lines.append(f"üìÖ <b>{m['date']}</b>\nüèí {m['title']}\nüéü <a href='{m['link']}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>")
    text = "\n\n".join(text_lines)
    text += "\n\nüèí –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö."

    await message.answer(text)

# ==============================
# üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
# ==============================
async def monitor_matches():
    global last_matches
    await asyncio.sleep(5)

    while True:
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞...")
            matches = fetch_matches()
            if not matches:
                logger.info("‚ùï –ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            else:
                current_set = {f"{m['title']}|{m['date']}" for m in matches}

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –º–∞—Ç—á–∏)
                if current_set != last_matches:
                    added = current_set - last_matches
                    removed = last_matches - current_set
                    last_matches = current_set

                    if added or removed:
                        text_parts = []
                        if added:
                            added_titles = [item.split('|')[0] for item in added]
                            text_parts.append("‚ûï <b>–ù–æ–≤—ã–µ –º–∞—Ç—á–∏:</b>\n" + "\n".join(f"üèí {t}" for t in added_titles))
                        if removed:
                            removed_titles = [item.split('|')[0] for item in removed]
                            text_parts.append("‚ûñ <b>–£–¥–∞–ª—ë–Ω–Ω—ã–µ –º–∞—Ç—á–∏:</b>\n" + "\n".join(f"üö´ {t}" for t in removed_titles))

                        if subscribers:
                            for chat_id in list(subscribers):
                                try:
                                    await bot.send_message(chat_id, "\n\n".join(text_parts))
                                except Exception as e:
                                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id}: {e}")
                                    subscribers.discard(chat_id)
                            logger.info(f"üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ‚úÖ {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
                        else:
                            logger.info("‚ùï –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                    else:
                        logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
                else:
                    logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ monitor_matches: {e}")

        logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL // 60} –º–∏–Ω.")
        await asyncio.sleep(CHECK_INTERVAL)

# ==============================
# üöÄ –ó–∞–ø—É—Å–∫ Flask + Bot
# ==============================
def run_flask():
    port = int(os.getenv("PORT", 10000))
    logger.info(f"üåê Starting Flask server on port {port}")
    app.run(host="0.0.0.0", port=port)

async def main():
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å polling)
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üåê Webhook —É–¥–∞–ª—ë–Ω, –≤–∫–ª—é—á–µ–Ω polling —Ä–µ–∂–∏–º.")

        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        logger.info("‚úÖ Flask server started")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        asyncio.create_task(monitor_matches())
        logger.info("‚úÖ Match monitoring started")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("‚úÖ Start polling")
        await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"‚ùå Fatal error in main: {e}")
        raise

if __name__ == "__main__":
    logger.info("üöÄ Starting Hockey Monitor Bot...")
    asyncio.run(main())
