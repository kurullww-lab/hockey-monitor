import asyncio
import logging
import json
import requests
import sqlite3
import os
from bs4 import BeautifulSoup
from datetime import datetime
from playwright.async_api import async_playwright

URL = "https://hcdinamo.by/tickets/"
BOT_TOKEN = "8416784515:AAG1yGWcgm9gGFPJLodfLvEJrtmIFVJjsu8"
STATE_FILE = "matches_state.json"
CHECK_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• –î–õ–Ø –ü–û–î–ü–ò–°–ß–ò–ö–û–í ==========

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    conn = sqlite3.connect('subscribers.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS subscribers
                 (chat_id TEXT PRIMARY KEY, username TEXT, subscribed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()
    logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def load_subscribers():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã"""
    try:
        conn = sqlite3.connect('subscribers.db')
        c = conn.cursor()
        c.execute("SELECT chat_id FROM subscribers")
        subscribers = [row[0] for row in c.fetchall()]
        conn.close()
        return subscribers
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        return []

def add_subscriber(chat_id, username=""):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤ –±–∞–∑—É"""
    try:
        conn = sqlite3.connect('subscribers.db')
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO subscribers (chat_id, username) VALUES (?, ?)", 
                 (chat_id, username))
        conn.commit()
        conn.close()
        logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id} ({username})")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")
        return False

def remove_subscriber(chat_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∏–∑ –±–∞–∑—ã"""
    try:
        conn = sqlite3.connect('subscribers.db')
        c = conn.cursor()
        c.execute("DELETE FROM subscribers WHERE chat_id = ?", (chat_id,))
        conn.commit()
        conn.close()
        logging.info(f"‚ùå –£–¥–∞–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id}")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")
        return False

# ========== TELEGRAM –§–£–ù–ö–¶–ò–ò ==========

async def send_direct_message(chat_id: str, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        response = requests.post(url, json=data, timeout=10)
        return response.status_code == 200
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä—è–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

async def send_telegram(text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    subscribers = load_subscribers()
    if not subscribers:
        logging.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return False
    
    success_count = 0
    
    for chat_id in subscribers:
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML",
                "disable_web_page_preview": True
            }
            r = requests.post(url, json=data, timeout=10)
            if r.status_code == 200:
                success_count += 1
            else:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è {chat_id}: {r.status_code}")
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                if r.status_code == 403:
                    remove_subscriber(chat_id)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {chat_id}: {e}")
    
    logging.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count}/{len(subscribers)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    return success_count > 0

async def check_telegram_updates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    last_update_id = 0
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ update_id
    try:
        if os.path.exists('last_update.txt'):
            with open('last_update.txt', 'r') as f:
                last_update_id = int(f.read().strip())
    except:
        pass
    
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
        params = {"offset": last_update_id + 1, "timeout": 5}
        response = requests.get(url, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get("ok"):
                for update in data.get("result", []):
                    last_update_id = update["update_id"]
                    
                    if "message" in update and "text" in update["message"]:
                        message = update["message"]
                        chat_id = str(message["chat"]["id"])
                        text = message["text"].strip()
                        username = message["chat"].get("username", "")
                        
                        if text == "/start":
                            if add_subscriber(chat_id, username):
                                welcome_msg = (
                                    "üéâ <b>–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö –•–ö –î–∏–Ω–∞–º–æ-–ú–∏–Ω—Å–∫!</b>\n\n"
                                    "üèí <b>–ß—Ç–æ —è –¥–µ–ª–∞—é:</b>\n"
                                    "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π –Ω–∞ —Å–∞–π—Ç–µ hcdinamo.by\n"
                                    "‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∏–≥—Ä–∞—Ö\n"
                                    "‚Ä¢ –°–æ–æ–±—â–∞—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n\n"
                                    "üîî <b>–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!</b>\n\n"
                                    "‚ùå –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop\n"
                                    "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ - /info"
                                )
                                await send_direct_message(chat_id, welcome_msg)
                            
                        elif text == "/stop":
                            if remove_subscriber(chat_id):
                                goodbye_msg = "‚ùå <b>–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.</b>"
                                await send_direct_message(chat_id, goodbye_msg)
                        
                        elif text == "/info":
                            subscribers_count = len(load_subscribers())
                            info_msg = (
                                "üèí <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∏–ª–µ—Ç–æ–≤ –•–ö –î–∏–Ω–∞–º–æ-–ú–∏–Ω—Å–∫</b>\n\n"
                                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                                f"‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count}\n"
                                "‚Ä¢ –°–∞–π—Ç: hcdinamo.by/tickets/\n"
                                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n\n"
                                "üîî <b>–ß—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é:</b>\n"
                                "‚Ä¢ –ü–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π\n"
                                "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n"
                                "‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π\n\n"
                                "‚öôÔ∏è <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                                "/start - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
                                "/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
                                "/info - —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
                                "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
                                "–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @kurullww"
                            )
                            await send_direct_message(chat_id, info_msg)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π update_id
            with open('last_update.txt', 'w') as f:
                f.write(str(last_update_id))
                
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")

# ========== –ü–ê–†–°–ò–ù–ì –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì ==========

async def fetch_matches():
    """–ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Playwright —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ç–∞–π–º–∞—É—Ç–æ–≤"""
    for attempt in range(3):
        try:
            logging.info(f"üåç –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3)...")
            async with async_playwright() as p:
                browser = await p.chromium.launch(
                    headless=True,
                    args=["--no-sandbox", "--disable-dev-shm-usage"]
                )
                page = await browser.new_page()
                await page.goto(URL, timeout=45000, wait_until="domcontentloaded")
                await page.wait_for_selector("div.match-list", timeout=20000)

                html = await page.content()
                await browser.close()

            soup = BeautifulSoup(html, "html.parser")
            blocks = soup.select("div.match-list")
            logging.info(f"üîé –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ match-list: {len(blocks)}")

            matches = []
            for b in blocks:
                for item in b.select("a.match-item"):
                    title = item.select_one("div.match-title")
                    date = item.select_one("div.match-day")
                    time = item.select_one("div.match-times")
                    if title and date and time:
                        href = item.get("href", URL)
                        if href.startswith("/"):
                            href = "https://hcdinamo.by" + href
                        matches.append({
                            "title": title.text.strip(),
                            "date": f"{date.text.strip()} {time.text.strip()}",
                            "url": href
                        })

            logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")
            return matches

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            await asyncio.sleep(5)

    logging.error("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫.")
    return []

def load_state():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Ç—á–µ–π"""
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return []

def save_state(matches):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Ç—á–µ–π"""
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(matches, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

# ========== –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ ==========

async def monitor():
    """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Dinamo Tickets")
    logging.info(f"üåê –°–∞–π—Ç: {URL}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    subscribers = load_subscribers()
    logging.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")

    old_matches = load_state()
    logging.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –º–∞—Ç—á–µ–π: {len(old_matches)}")

    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await check_telegram_updates()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π
            new_matches = await fetch_matches()
            if not new_matches:
                logging.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç—á–∏, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1 –º–∏–Ω.")
                await asyncio.sleep(60)
                continue

            old_titles = {m["title"] for m in old_matches}
            new_titles = {m["title"] for m in new_matches}

            added = new_titles - old_titles
            removed = old_titles - new_titles

            if added or removed:
                logging.info(f"‚ú® –ò–∑–º–µ–Ω–µ–Ω–∏—è: +{len(added)}, -{len(removed)}")

                for m in new_matches:
                    if m["title"] in added:
                        msg = (
                            f"üéâ <b>–ù–û–í–´–ô –ú–ê–¢–ß!</b>\n\n"
                            f"üèí {m['title']}\n"
                            f"üìÖ {m['date']}\n\n"
                            f"üéü <a href='{m['url']}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã</a>"
                        )
                        await send_telegram(msg)
                        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

                for m in old_matches:
                    if m["title"] in removed:
                        msg = (
                            f"üóëÔ∏è <b>–ú–ê–¢–ß –£–î–ê–õ–Å–ù</b>\n\n"
                            f"üèí {m['title']}\n"
                            f"üìÖ {m['date']}"
                        )
                        await send_telegram(msg)
                        await asyncio.sleep(1)

                save_state(new_matches)
                old_matches = new_matches
            else:
                logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")

            logging.info(f"üìä –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {len(new_matches)}")
            await asyncio.sleep(CHECK_INTERVAL)

        except Exception as e:
            logging.error(f"üí• –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(60)

if __name__ == "__main__":
    asyncio.run(monitor())
