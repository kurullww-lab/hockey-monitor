import os
import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.default import DefaultBotProperties
from bs4 import BeautifulSoup
from flask import Flask, jsonify
import re
from datetime import datetime, timedelta

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ is_match_started)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—á–∞–ª—Å—è –ª–∏ –º–∞—Ç—á ===
def is_match_started(match):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        now = datetime.now()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–∞—Ç—á–∞ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        match_date_str = match["date"]
        match_time_str = match["time"]
        
        logging.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç—á: {match['title']}")
        logging.info(f"üìÖ –î–∞—Ç–∞ –º–∞—Ç—á–∞: {match_date_str}")
        logging.info(f"üïí –í—Ä–µ–º—è –º–∞—Ç—á–∞: {match_time_str}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –º–∞—Ç—á–∞
        match_date = parse_match_date(match_date_str, now)
        if not match_date:
            logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {match_date_str}")
            return False
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –º–∞—Ç—á–∞
        match_time = parse_match_time(match_time_str)
        if not match_time:
            logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è: {match_time_str}")
            return False
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        match_datetime = datetime.combine(match_date, match_time)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–∞—Ç—á –≤ "–æ–∫–Ω–µ –Ω–∞—á–∞–ª–∞" (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ¬± 3 —á–∞—Å–∞ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ç—á–∞)
        time_diff = now - match_datetime
        time_diff_hours = time_diff.total_seconds() / 3600
        
        logging.info(f"‚è∞ –í—Ä–µ–º—è –º–∞—Ç—á–∞: {match_datetime}")
        logging.info(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")
        logging.info(f"üìä –†–∞–∑–Ω–∏—Ü–∞: {time_diff_hours:.2f} —á–∞—Å–æ–≤")
        
        # –ú–∞—Ç—á —Å—á–∏—Ç–∞–µ—Ç—Å—è –Ω–∞—á–∞–≤—à–∏–º—Å—è, –µ—Å–ª–∏ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã–ª –Ω–∞—á–∞—Ç—å—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞
        # –∏ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å —Å –Ω–∞—á–∞–ª–∞
        is_started = -1 <= time_diff_hours <= 24
        
        if is_started:
            logging.info(f"üéØ –ú–∞—Ç—á –Ω–∞—á–∞–ª—Å—è: {match['title']}")
        else:
            logging.info(f"üí§ –ú–∞—Ç—á –Ω–µ –Ω–∞—á–∞–ª—Å—è –∏–ª–∏ —É–∂–µ –¥–∞–≤–Ω–æ –ø—Ä–æ—à–µ–ª: {match['title']}")
            
        return is_started
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—á–∞–ª–∞ –º–∞—Ç—á–∞ {match['title']}: {e}")
        return False

# === –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –º–∞—Ç—á–∞ ===
def parse_match_date(date_str, current_date):
    try:
        # –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤: "15 –Ω–æ—è–±—Ä—è, –ü—è—Ç–Ω–∏—Ü–∞", "15 –Ω–æ—è–±—Ä—è"
        # –£–¥–∞–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        date_clean = re.split(r',', date_str)[0].strip()
        
        # –ò—â–µ–º —á–∏—Å–ª–æ –∏ –º–µ—Å—è—Ü
        match = re.match(r'(\d{1,2})\s+([–∞-—è]+)', date_clean)
        if not match:
            return None
            
        day = int(match.group(1))
        month_name = match.group(2).lower()
        
        # –û–±—Ä–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –º–µ—Å—è—Ü–µ–≤
        MONTHS_REVERSE = {
            "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4,
            "–º–∞—è": 5, "–∏—é–Ω—è": 6, "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8,
            "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
        }
        
        month = MONTHS_REVERSE.get(month_name)
        if not month:
            return None
        
        # –ü—Ä–æ–±—É–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
        year = current_date.year
        match_date = datetime(year, month, day).date()
        
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –º–∞—Ç—á–∞ –≤ –ø—Ä–æ—à–ª–æ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã (–Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–æ–¥–∞),
        # –≤–æ–∑–º–æ–∂–Ω–æ –º–∞—Ç—á –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É
        if match_date < current_date.date():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Ä–∞–Ω–æ (–±–æ–ª—å—à–µ 2 –º–µ—Å—è—Ü–µ–≤ —Ä–∞–∑–Ω–∏—Ü—ã)
            days_diff = (current_date.date() - match_date).days
            if days_diff > 60:  # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 2 –º–µ—Å—è—Ü–µ–≤
                match_date = datetime(year + 1, month, day).date()
        
        return match_date
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_str}': {e}")
        return None

# === –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ç—á–∞ ===
def parse_match_time(time_str):
    try:
        # –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤: "19:30", "19.30", "19-30"
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        time_normalized = re.sub(r'[\.\-]', ':', time_str).strip()
        
        # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
        match = re.match(r'(\d{1,2}):(\d{2})', time_normalized)
        if match:
            hours = int(match.group(1))
            minutes = int(match.group(2))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
            if 0 <= hours <= 23 and 0 <= minutes <= 59:
                return datetime.strptime(f"{hours:02d}:{minutes:02d}", "%H:%M").time()
        
        return None
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ '{time_str}': {e}")
        return None

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ)
