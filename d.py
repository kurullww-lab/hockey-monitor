import asyncio
import logging
import os
import json
import aiohttp
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from flask import Flask

# --------------------------------------------------
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# --------------------------------------------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))
TICKETS_URL = "https://dinamo-minsk.by/tickets/"

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
app = Flask(__name__)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
MATCHES_FILE = "matches.json"
SUBSCRIBERS_FILE = "subscribers.json"

# --------------------------------------------------
# üìã –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# --------------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# --------------------------------------------------
# üóÇÔ∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ
# --------------------------------------------------
def load_json(filename):
    if not os.path.exists(filename):
        return []
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []

def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

matches_old = load_json(MATCHES_FILE)
subscribers = load_json(SUBSCRIBERS_FILE)

# --------------------------------------------------
# üåç –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—á–µ–π
# --------------------------------------------------
async def fetch_matches():
    async with aiohttp.ClientSession() as session:
        async with session.get(TICKETS_URL) as response:
            html = await response.text()

    soup = BeautifulSoup(html, "html.parser")
    items = soup.select("a.match-item")
    logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ a.match-item: {len(items)}")

    matches = []
    for item in items:
        date = item.select_one(".match-item__date")
        teams = item.select_one(".match-item__teams")
        if not date or not teams:
            continue
        title = teams.text.strip().replace("\n", " ")
        when = date.text.strip()
        link = item.get("href")
        if link and not link.startswith("http"):
            link = f"https://dinamo-minsk.by{link}"
        matches.append({"when": when, "title": title, "url": link})

    logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")
    return matches

# --------------------------------------------------
# üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# --------------------------------------------------
async def notify_all(message: str):
    if not subscribers:
        logging.info("‚ùï –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return

    success, failed = 0, 0
    for user_id in subscribers:
        try:
            await bot.send_message(user_id, message, disable_web_page_preview=True)
            success += 1
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {user_id}: {e}")
            failed += 1
    logging.info(f"üìä –ò—Ç–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏: ‚úÖ {success} / ‚ùå {failed}")

# --------------------------------------------------
# üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π
# --------------------------------------------------
async def monitor():
    global matches_old

    while True:
        try:
            logging.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞...")
            matches_new = await fetch_matches()

            # –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            if not matches_old:
                matches_old = matches_new
                save_json(MATCHES_FILE, matches_new)
                await notify_all("üèí –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!\n\nüìÖ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: "
                                 f"{len(matches_new)}")
            else:
                old_titles = {m["title"] for m in matches_old}
                new_titles = {m["title"] for m in matches_new}

                added = [m for m in matches_new if m["title"] not in old_titles]
                removed = [m for m in matches_old if m["title"] not in new_titles]

                if added or removed:
                    msg = "üé´ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –º–∞—Ç—á–µ–π:\n"
                    if added:
                        msg += "\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã:\n" + "\n".join(
                            [f"‚Ä¢ {m['when']} ‚Äî {m['title']} [–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã]({m['url']})" for m in added])
                    if removed:
                        msg += "\n\n‚ûñ –£–¥–∞–ª–µ–Ω—ã:\n" + "\n".join(
                            [f"‚Ä¢ {m['when']} ‚Äî {m['title']}" for m in removed])
                    await notify_all(msg)
                    matches_old = matches_new
                    save_json(MATCHES_FILE, matches_new)
                    logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")
                else:
                    logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

        logging.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL // 60} –º–∏–Ω.")
        await asyncio.sleep(CHECK_INTERVAL)

# --------------------------------------------------
# ü§ñ Telegram –∫–æ–º–∞–Ω–¥—ã
# --------------------------------------------------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in subscribers:
        subscribers.append(user_id)
        save_json(SUBSCRIBERS_FILE, subscribers)
        await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫!")
    else:
        await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if matches_old:
        msg = "üìÖ –¢–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏:\n\n" + "\n".join(
            [f"{m['when']} ‚Äî {m['title']} [–ë–∏–ª–µ—Ç—ã]({m['url']})" for m in matches_old]
        )
        await message.answer(msg, disable_web_page_preview=True)
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π.")

@dp.message(Command("stop"))
async def cmd_stop(message: types.Message):
    user_id = message.from_user.id
    if user_id in subscribers:
        subscribers.remove(user_id)
        save_json(SUBSCRIBERS_FILE, subscribers)
        await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# --------------------------------------------------
# üåê Flask –¥–ª—è Render
# --------------------------------------------------
@app.route("/")
def index():
    return "‚úÖ Hockey Monitor —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route("/health")
def health():
    return "ok"

# --------------------------------------------------
# üöÄ –ó–∞–ø—É—Å–∫
# --------------------------------------------------
async def main():
    # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π webhook, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("üåê Webhook —É–¥–∞–ª—ë–Ω, –≤–∫–ª—é—á–µ–Ω polling —Ä–µ–∂–∏–º.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    asyncio.create_task(monitor())

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    from threading import Thread

    # Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_flask():
        port = int(os.getenv("PORT", 10000))
        logging.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
        app.run(host="0.0.0.0", port=port)

    Thread(target=run_flask, daemon=True).start()
    asyncio.run(main())
