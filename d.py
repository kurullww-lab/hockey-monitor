import os
import asyncio
import logging
import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from flask import Flask
from threading import Thread

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))
URL = "https://hcdinamo.by/match/"

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=types.DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# üß© –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
subscribers = set()
last_matches = []


# ==============================
# üîç –ü–∞—Ä—Å–µ—Ä –º–∞—Ç—á–µ–π
# ==============================
def fetch_matches():
    try:
        response = requests.get(URL, timeout=15)
        if response.status_code != 200:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ({response.status_code})")
            return []

        soup = BeautifulSoup(response.text, "html.parser")
        match_blocks = soup.find_all("div", class_="match-title")
        logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(match_blocks)}")

        matches = []
        for block in match_blocks:
            title = block.get_text(strip=True)
            parent = block.find_parent("a")
            link = parent["href"] if parent and parent.has_attr("href") else URL
            date_el = block.find_previous("div", class_="match-date")
            time_el = block.find_next("div", class_="match-time")

            matches.append({
                "title": title,
                "date": date_el.get_text(strip=True) if date_el else "",
                "time": time_el.get_text(strip=True) if time_el else "",
                "link": link,
            })

        return matches

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        return []


# ==============================
# üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# ==============================
async def notify_all(bot, added_matches, removed_matches, subscribers):
    if not added_matches and not removed_matches:
        return

    added_text = ""
    removed_text = ""

    # –ù–æ–≤—ã–µ –º–∞—Ç—á–∏
    if added_matches:
        added_text = "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ:\n" + "\n\n".join(
            f"üìÖ {m['date']}\nüèí {m['title']}\nüïí {m['time']}\nüéü <a href='{m['link']}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"
            for m in added_matches
        )

    # –£–¥–∞–ª—ë–Ω–Ω—ã–µ (–Ω–∞—á–∞–≤—à–∏–µ—Å—è) –º–∞—Ç—á–∏ ‚Äî –±–µ–∑ —Å—Å—ã–ª–∫–∏
    if removed_matches:
        removed_text = "‚ûñ –£–¥–∞–ª–µ–Ω–æ:\n" + "\n\n".join(
            f"üìÖ {m['date']}\nüèí {m['title']}\nüïí {m['time']}"
            for m in removed_matches
        )

    text = "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π:\n\n" + "\n\n".join(filter(None, [added_text, removed_text]))

    for chat_id in subscribers:
        try:
            await bot.send_message(chat_id, text, disable_web_page_preview=True)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id}: {e}")


# ==============================
# üïí –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ==============================
async def monitor_matches():
    global last_matches
    logging.info("üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π –∑–∞–ø—É—â–µ–Ω!")
    last_matches = fetch_matches()

    while True:
        await asyncio.sleep(CHECK_INTERVAL)
        current_matches = fetch_matches()
        if not current_matches:
            logging.info("‚ö†Ô∏è –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")
            continue

        added = [m for m in current_matches if m not in last_matches]
        removed = [m for m in last_matches if m not in current_matches]

        if added or removed:
            logging.info(f"‚ö° –ò–∑–º–µ–Ω–µ–Ω–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(added)}, —É–¥–∞–ª–µ–Ω–æ {len(removed)}")
            await notify_all(bot, added, removed, subscribers)
            last_matches = current_matches
        else:
            logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")


# ==============================
# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
# ==============================
@dp.message(Command("start"))
async def start_cmd(message: Message):
    user_id = message.from_user.id
    subscribers = load_subscribers()

    if user_id not in subscribers:
        subscribers.append(user_id)
        save_subscribers(subscribers)
        logger.info(f"üìù –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")

    await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫!")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
    matches = fetch_matches()
    logger.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –º–∞—Ç—á–µ–π –∏–∑ fetch_matches: {len(matches)}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if matches:
        await notify_all(matches, [], [user_id])
    else:
        await message.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π.")


# ==============================
# üåê Flask (Render healthcheck)
# ==============================
app = Flask(__name__)

@app.route("/")
def home():
    return "‚úÖ Hockey Monitor is running"

def run_flask():
    app.run(host="0.0.0.0", port=10000)


# ==============================
# üîÑ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# ==============================
async def main():
    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()
    await asyncio.sleep(2)
    asyncio.create_task(monitor_matches())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
