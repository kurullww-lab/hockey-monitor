import asyncio
import logging
import threading
import os
import requests
import time
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from flask import Flask

# ==============================
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ==============================
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")

if not BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN environment variable is not set!")

CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
RENDER_URL = os.getenv("RENDER_URL", "https://hockey-monitor.onrender.com")

MATCHES_URL = "https://hcdinamo.by/tickets/"

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger("hockey_monitor")

# –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ï–†–°–ò–ò
CODE_VERSION = "2.2 - FIXED_MONTH_PARSING"
logger.info(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –∫–æ–¥–∞: {CODE_VERSION}")

app = Flask(__name__)

@app.route('/')
def index():
    return f"‚úÖ Hockey Monitor Bot is running! Version: {CODE_VERSION}"

@app.route('/health')
def health():
    return "OK", 200

@app.route('/version')
def version():
    return f"Version: {CODE_VERSION}", 200

try:
    bot = Bot(
        token=BOT_TOKEN, 
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher()
    logger.info("‚úÖ Bot initialized successfully")
except Exception as e:
    logger.error(f"‚ùå Failed to initialize bot: {e}")
    raise

subscribers = set()
last_matches_dict = {}

# ==============================
# üèí –ü–∞—Ä—Å–µ—Ä –º–∞—Ç—á–µ–π
# ==============================
def parse_month_and_day(month_text):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –º–µ—Å—è—Ü –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ '–æ–∫—Ç, –ü—Ç'"""
    if not month_text:
        return None, None
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
    parts = [part.strip() for part in month_text.split(',')]
    
    if len(parts) >= 2:
        month = parts[0]  # '–æ–∫—Ç'
        day_of_week = parts[1]  # '–ü—Ç'
        return month, day_of_week
    else:
        return month_text, None

def format_date(day, month, day_of_week, time):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ –∫—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥: 24 –æ–∫—Ç—è–±—Ä—è, –ü—Ç 19:00"""
    try:
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        month_map = {
            '—è–Ω–≤': '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤': '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä': '–º–∞—Ä—Ç–∞', '–∞–ø—Ä': '–∞–ø—Ä–µ–ª—è',
            '–º–∞–π': '–º–∞—è', '–∏—é–Ω': '–∏—é–Ω—è', '–∏—é–ª': '–∏—é–ª—è', '–∞–≤–≥': '–∞–≤–≥—É—Å—Ç–∞',
            '—Å–µ–Ω': '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç': '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è': '–Ω–æ—è–±—Ä—è', '–¥–µ–∫': '–¥–µ–∫–∞–±—Ä—è'
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–µ—Å—è—Ü –≤ –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        full_month = month_map.get(month, month)
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–∞—Ç—ã
        date_parts = []
        
        if day and full_month:
            date_parts.append(f"{day} {full_month}")
        
        if day_of_week:
            date_parts.append(day_of_week)
            
        if time:
            date_parts.append(time)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º: "24 –æ–∫—Ç—è–±—Ä—è, –ü—Ç 19:00"
        if len(date_parts) >= 2:
            main_date = date_parts[0]
            other_parts = " ".join(date_parts[1:])
            return f"{main_date}, {other_parts}"
        else:
            return " ".join(date_parts) if date_parts else "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")
        return f"{day if day else '?'} {month if month else '?'} {time if time else '?'}"

def fetch_matches():
    try:
        response = requests.get(MATCHES_URL, timeout=15)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")

        matches = []
        match_elements = soup.select("a.match-item")
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ a.match-item: {len(match_elements)}")
        
        for i, match in enumerate(match_elements):
            title = match.select_one(".match-title")
            date_day = match.select_one(".match-day")
            date_month = match.select_one(".match-month")
            time = match.select_one(".match-times")
            ticket_link = match.get("href")

            title_text = title.get_text(strip=True) if title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            
            day_text = date_day.get_text(strip=True) if date_day else None
            month_text = date_month.get_text(strip=True) if date_month else None
            time_text = time.get_text(strip=True) if time else None
            
            # –†–ê–ó–î–ï–õ–Ø–ï–ú –ú–ï–°–Ø–¶ –ò –î–ï–ù–¨ –ù–ï–î–ï–õ–ò
            month_only, day_of_week = parse_month_and_day(month_text)
            
            # –û–¢–õ–ê–î–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø–∞—Ä—Å–∏–º
            logger.info(f"üîç –ú–∞—Ç—á {i+1}: –¥–µ–Ω—å='{day_text}', –º–µ—Å—è—Ü='{month_only}', –¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏='{day_of_week}', –≤—Ä–µ–º—è='{time_text}'")
            
            # –§–û–†–ú–ê–¢–ò–†–£–ï–ú –î–ê–¢–£
            date_text = format_date(day_text, month_only, day_of_week, time_text)
            
            if ticket_link:
                full_link = ticket_link if ticket_link.startswith("http") else f"https://hcdinamo.by{ticket_link}"
            else:
                full_link = "https://hcdinamo.by/tickets/"

            match_data = {
                "title": title_text,
                "date": date_text,
                "link": full_link
            }
            matches.append(match_data)

        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")
        return matches
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π: {e}")
        return []

# ==============================
# üì¢ –ö–æ–º–∞–Ω–¥–∞ /start
# ==============================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    subscribers.add(message.chat.id)
    logger.info(f"üìù –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {message.chat.id}")

    matches = fetch_matches()

    if not matches:
        await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫!\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π.\nüèí –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
        return

    # –ü–µ—Ä–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫!\n\nüèí –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
    for m in matches:
        text = f"üìÖ <b>{m['date']}</b>\nüèí {m['title']}\nüéü <a href='{m['link']}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"
        await message.answer(text)
        await asyncio.sleep(0.3)  # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã Telegram –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–ª

# ==============================
# üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
# ==============================
async def monitor_matches():
    global last_matches_dict
    await asyncio.sleep(5)

    while True:
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞...")
            current_matches = fetch_matches()
            
            if not current_matches:
                logger.info("‚ùï –ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            else:
                # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–µ–∫—É—â–∏—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                current_dict = {f"{m['title']}|{m['date']}": m for m in current_matches}
                current_keys = set(current_dict.keys())
                last_keys = set(last_matches_dict.keys())

                # –ù–∞—Ö–æ–¥–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                added_keys = current_keys - last_keys
                removed_keys = last_keys - current_keys

                if added_keys or removed_keys:
                    logger.info(f"üìà –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è: +{len(added_keys)}, -{len(removed_keys)}")

                    if subscribers:
                        # –û–¢–î–ï–õ–¨–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ù–û–í–û–ì–û –ú–ê–¢–ß–ê
                        if added_keys:
                            logger.info(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(added_keys)} –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö")
                            for key in added_keys:
                                match_data = current_dict[key]
                                message_text = f"‚ûï <b>–ù–æ–≤—ã–π –º–∞—Ç—á!</b>\n\nüèí {match_data['title']}\nüìÖ {match_data['date']}\n\nüé´ <a href='{match_data['link']}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"
                                
                                for chat_id in list(subscribers):
                                    try:
                                        await bot.send_message(chat_id, message_text)
                                        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∞—Ç—á–∞: {match_data['title']}")
                                        await asyncio.sleep(0.3)
                                    except Exception as e:
                                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id}: {e}")
                                        subscribers.discard(chat_id)
                            
                            logger.info(f"üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ {len(added_keys)} –Ω–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

                        # –û–¢–î–ï–õ–¨–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ü–†–û–®–ï–î–®–ï–ì–û/–û–¢–ú–ï–ù–ï–ù–ù–û–ì–û –ú–ê–¢–ß–ê
                        if removed_keys:
                            logger.info(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(removed_keys)} –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö")
                            for key in removed_keys:
                                match_data = last_matches_dict[key]
                                message_text = f"‚ûñ <b>–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω/–æ—Ç–º–µ–Ω–µ–Ω</b>\n\nüèí {match_data['title']}\nüìÖ {match_data['date']}\n\n‚ÑπÔ∏è –ú–∞—Ç—á –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤"
                                
                                for chat_id in list(subscribers):
                                    try:
                                        await bot.send_message(chat_id, message_text)
                                        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ: {match_data['title']}")
                                        await asyncio.sleep(0.3)
                                    except Exception as e:
                                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id}: {e}")
                                        subscribers.discard(chat_id)
                            
                            logger.info(f"üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ {len(removed_keys)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

                    # –û–ë–ù–û–í–õ–Ø–ï–ú –ö–≠–®
                    last_matches_dict = current_dict
                    
                else:
                    logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ monitor_matches: {e}")

        logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL // 60} –º–∏–Ω.")
        await asyncio.sleep(CHECK_INTERVAL)

# ==============================
# ü´Ä Keep-Alive –º–µ—Ö–∞–Ω–∏–∑–º
# ==============================
def keep_alive():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫–∞–∂–¥—ã–µ 14 –º–∏–Ω—É—Ç —á—Ç–æ–±—ã —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞—Å—ã–ø–∞–ª –Ω–∞ Render.com"""
    time.sleep(30)
    
    while True:
        try:
            response = requests.get(f"{RENDER_URL}/version", timeout=10)
            if response.status_code == 200:
                logger.info(f"ü´Ä Keep-alive request sent - {response.text}")
            else:
                logger.warning(f"ü´Ä Keep-alive got status: {response.status_code}")
        except Exception as e:
            logger.error(f"‚ùå Keep-alive failed: {e}")
        
        time.sleep(840)

def run_flask():
    port = int(os.getenv("PORT", 10000))
    logger.info(f"üåê Starting Flask server on port {port}")
    app.run(host="0.0.0.0", port=port)

async def main():
    try:
        # –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –ü–ï–†–í–´–ô –ö–≠–®
        initial_matches = fetch_matches()
        global last_matches_dict
        last_matches_dict = {f"{m['title']}|{m['date']}": m for m in initial_matches}
        logger.info(f"üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫—ç—à —Å {len(last_matches_dict)} –º–∞—Ç—á–∞–º–∏")

        keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)
        keep_alive_thread.start()
        logger.info("‚úÖ Keep-alive thread started")

        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üåê Webhook —É–¥–∞–ª—ë–Ω, –≤–∫–ª—é—á–µ–Ω polling —Ä–µ–∂–∏–º.")

        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        logger.info("‚úÖ Flask server started")

        asyncio.create_task(monitor_matches())
        logger.info("‚úÖ Match monitoring started")

        logger.info("‚úÖ Start polling")
        await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"‚ùå Fatal error in main: {e}")
        raise

if __name__ == "__main__":
    logger.info("üöÄ Starting Hockey Monitor Bot...")
    asyncio.run(main())
