import os
import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.default import DefaultBotProperties
from bs4 import BeautifulSoup
from flask import Flask, jsonify
import re
from datetime import datetime, timedelta
import threading

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))
URL = "https://hcdinamo.by/tickets/"

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === Flask ===
app = Flask(__name__)

@app.route('/')
def index():
    return jsonify({"status": "ok", "service": "hockey-monitor"})

@app.route('/health')
def health():
    return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()})

@app.route('/version')
def version():
    return jsonify({"version": "2.4.1 - FIXED_DEPLOY"})

# === Telegram bot ===
session = AiohttpSession()
bot = Bot(
    token=BOT_TOKEN,
    session=session,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# === –ü–∞–º—è—Ç—å ===
subscribers = set()
last_matches = []

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –º–µ—Å—è—Ü–µ–≤ –∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
MONTHS = {
    "—è–Ω–≤": "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤": "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä": "–º–∞—Ä—Ç–∞", "–∞–ø—Ä": "–∞–ø—Ä–µ–ª—è",
    "–º–∞–π": "–º–∞—è", "–∏—é–Ω": "–∏—é–Ω—è", "–∏—é–ª": "–∏—é–ª—è", "–∞–≤–≥": "–∞–≤–≥—É—Å—Ç–∞",
    "—Å–µ–Ω": "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç": "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è": "–Ω–æ—è–±—Ä—è", "–¥–µ–∫": "–¥–µ–∫–∞–±—Ä—è"
}

WEEKDAYS = {
    "–ø–Ω": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç": "–í—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä": "–°—Ä–µ–¥–∞", "—á—Ç": "–ß–µ—Ç–≤–µ—Ä–≥",
    "–ø—Ç": "–ü—è—Ç–Ω–∏—Ü–∞", "—Å–±": "–°—É–±–±–æ—Ç–∞", "–≤—Å": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

# === –ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç—á–µ–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è) ===
async def fetch_matches():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(URL, timeout=aiohttp.ClientTimeout(total=10)) as resp:
                html = await resp.text()

        soup = BeautifulSoup(html, 'html.parser')
        match_items = soup.select("a.match-item")
        logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(match_items)}")

        matches = []
        for item in match_items:
            day_elem = item.select_one(".match-day")
            month_elem = item.select_one(".match-month")
            time_elem = item.select_one(".match-times")
            title_elem = item.select_one(".match-title")
            ticket = item.select_one(".btn.tickets-w_t")
            ticket_url = ticket.get("data-w_t") if ticket else None

            day = day_elem.get_text(strip=True) if day_elem else "?"
            month_raw = month_elem.get_text(strip=True).lower() if month_elem else "?"
            time_ = time_elem.get_text(strip=True) if time_elem else "?"
            title = title_elem.get_text(strip=True) if title_elem else "?"

            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
            month, weekday = "?", "?"
            if month_raw != "?":
                match = re.match(r'^([–∞-—è]{3,4})(?:,\s*([–∞-—è]{2}))?$', month_raw)
                if match:
                    month = match.group(1)
                    weekday = match.group(2) if match.group(2) else "?"

            full_month = MONTHS.get(month, month)
            full_weekday = WEEKDAYS.get(weekday, weekday) if weekday != "?" else ""

            date_formatted = f"{day} {full_month}" if day != "?" and month != "?" else "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            if full_weekday:
                date_formatted += f", {full_weekday}"

            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Ç—á–∞
            match_id = f"{date_formatted}|{title}|{time_}"
            
            msg = (
                f"üìÖ {date_formatted}\n"
                f"üèí {title}\n"
                f"üïí {time_}\n"
            )
            if ticket_url:
                msg += f"üéü <a href='{ticket_url}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"
            
            matches.append({
                "id": match_id,
                "message": msg,
                "date": date_formatted,
                "title": title,
                "time": time_
            })
        return matches
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –º–∞—Ç—á–µ–π: {e}")
        return []

# === –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Ç—á–µ–π ===
def compare_matches(old_matches, new_matches):
    if not old_matches:
        return new_matches, []
    
    old_ids = {match["id"] for match in old_matches}
    new_ids = {match["id"] for match in new_matches}
    
    added_ids = new_ids - old_ids
    removed_ids = old_ids - new_ids
    
    added_matches = [match for match in new_matches if match["id"] in added_ids]
    removed_matches = [match for match in old_matches if match["id"] in removed_ids]
    
    return added_matches, removed_matches

# === –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞ –º–∞—Ç—á–∞ ===
def is_match_started(match):
    try:
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –º–∞—Ç—á —É–¥–∞–ª–µ–Ω, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –æ–Ω –Ω–∞—á–∞–ª—Å—è
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        return True  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ - –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –º–∞—Ç—á –Ω–∞—á–∞–ª—Å—è
    except Exception:
        return True

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===
async def monitor_matches():
    global last_matches
    await asyncio.sleep(10)  # –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç
    while True:
        try:
            current_matches = await fetch_matches()
            
            if last_matches:
                added, removed = compare_matches(last_matches, current_matches)
                
                if added:
                    for match in added:
                        await notify_all(f"üéâ –ü–û–Ø–í–ò–õ–°–Ø –ù–û–í–´–ô –ú–ê–¢–ß!\n\n{match['message']}")
                        logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–∞—Ç—á: {match['title']}")
                
                if removed:
                    for match in removed:
                        await notify_all(f"‚è∞ –ú–ê–¢–ß –ù–ê–ß–ê–õ–°–Ø!\n\n{match['message']}\n\n–ú–∞—Ç—á –Ω–∞—á–∞–ª—Å—è, —É–¥–∞—á–∏ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ! üèí")
                        logging.info(f"‚è∞ –ú–∞—Ç—á –Ω–∞—á–∞–ª—Å—è: {match['title']}")
                
                if added or removed:
                    last_matches = current_matches
                else:
                    logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
            else:
                # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
                last_matches = current_matches
                logging.info("üìù –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
        
        await asyncio.sleep(CHECK_INTERVAL)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
async def notify_all(message):
    if not subscribers:
        logging.info("‚ùï –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return
    
    for chat_id in list(subscribers):  # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        try:
            await bot.send_message(chat_id, message)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
            subscribers.discard(chat_id)

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    subscribers.add(message.chat.id)
    logging.info(f"üìù –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {message.chat.id}")
    await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫! üèí")
    
    if last_matches:
        await message.answer(f"üìã –°–µ–π—á–∞—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è {len(last_matches)} –º–∞—Ç—á–µ–π:")
        for match in last_matches[:3]:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
            await message.answer(match["message"])
        if len(last_matches) > 3:
            await message.answer(f"... –∏ –µ—â–µ {len(last_matches) - 3} –º–∞—Ç—á–µ–π")
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π. –Ø —Å–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ!")

@dp.message(Command("stop"))
async def stop_cmd(message: types.Message):
    subscribers.discard(message.chat.id)
    await message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    logging.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –æ—Ç–ø–∏—Å–∞–ª—Å—è.")

@dp.message(Command("status"))
async def status_cmd(message: types.Message):
    status_msg = (
        f"üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n"
        f"‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –º–∞—Ç—á–µ–π: {len(last_matches) if last_matches else 0}\n"
        f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ: {CHECK_INTERVAL} —Å–µ–∫\n"
        f"‚Ä¢ –í–µ—Ä—Å–∏—è: 2.4.1"
    )
    await message.answer(status_msg)

# === –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ===
def run_flask():
    app.run(host="0.0.0.0", port=10000, debug=False, use_reloader=False)

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def main():
    logging.info("üöÄ Starting application...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logging.info("üåê Flask server started in background thread")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π
    asyncio.create_task(monitor_matches())
    logging.info("üîç Match monitoring started")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("ü§ñ Bot starting in polling mode...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not BOT_TOKEN:
        logging.error("‚ùå TELEGRAM_TOKEN environment variable is required!")
        exit(1)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üëã Application stopped by user")
    except Exception as e:
        logging.error(f"üí• Critical error: {e}")
