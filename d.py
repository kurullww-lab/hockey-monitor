import os
import asyncio
import logging
import threading
import requests
from flask import Flask, request, jsonify
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Update
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from bs4 import BeautifulSoup
import re
import datetime

# ---------------------- CONFIG ----------------------
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "300"))
URL = "https://hcdinamo.by/tickets/"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π URL
APP_URL = "https://hockey-monitor.onrender.com/version"  # –î–ª—è —Å–∞–º–æ–ø–∏–Ω–≥–∞

# ---------------------- LOGGING ----------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ---------------------- INIT ----------------------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
app = Flask(__name__)

matches_cache = set()
subscribers_file = "subscribers.txt"
main_loop = None

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–µ—Å—è—Ü–µ–≤
MONTHS = {
    "—è–Ω–≤": "—è–Ω–≤–∞—Ä—è",
    "—Ñ–µ–≤": "—Ñ–µ–≤—Ä–∞–ª—è",
    "–º–∞—Ä": "–º–∞—Ä—Ç–∞",
    "–∞–ø—Ä": "–∞–ø—Ä–µ–ª—è",
    "–º–∞–π": "–º–∞—è",
    "–∏—é–Ω": "–∏—é–Ω—è",
    "–∏—é–ª": "–∏—é–ª—è",
    "–∞–≤–≥": "–∞–≤–≥—É—Å—Ç–∞",
    "—Å–µ–Ω": "—Å–µ–Ω—Ç—è–±—Ä—è",
    "–æ–∫—Ç": "–æ–∫—Ç—è–±—Ä—è",
    "–Ω–æ—è": "–Ω–æ—è–±—Ä—è",
    "–¥–µ–∫": "–¥–µ–∫–∞–±—Ä—è"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
WEEKDAYS = {
    "–ø–Ω": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "–≤—Ç": "–í—Ç–æ—Ä–Ω–∏–∫",
    "—Å—Ä": "–°—Ä–µ–¥–∞",
    "—á—Ç": "–ß–µ—Ç–≤–µ—Ä–≥",
    "–ø—Ç": "–ü—è—Ç–Ω–∏—Ü–∞",
    "—Å–±": "–°—É–±–±–æ—Ç–∞",
    "–≤—Å": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

# ---------------------- SUBSCRIBERS ----------------------
def load_subscribers():
    if not os.path.exists(subscribers_file):
        return set()
    with open(subscribers_file, "r") as f:
        return set(f.read().splitlines())

def save_subscriber(user_id):
    subs = load_subscribers()
    subs.add(str(user_id))
    with open(subscribers_file, "w") as f:
        f.write("\n".join(subs))

# ---------------------- PARSING ----------------------
def fetch_matches():
    try:
        response = requests.get(URL, timeout=10)
        if response.status_code != 200:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ({response.status_code}) –¥–ª—è URL: {URL}")
            return []

        soup = BeautifulSoup(response.text, "html.parser")
        match_items = soup.select("a.match-item")
        logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(match_items)}")

        matches = []
        for item in match_items:
            day_elem = item.select_one(".match-day")
            month_elem = item.select_one(".match-month")
            time_elem = item.select_one(".match-times")
            title_elem = item.select_one(".match-title")
            ticket = item.select_one(".btn.tickets-w_t")
            ticket_url = ticket.get("data-w_t") if ticket else None

            day = day_elem.get_text(strip=True) if day_elem else "?"
            month_raw = month_elem.get_text(strip=True).lower() if month_elem else "?"
            time_ = time_elem.get_text(strip=True) if time_elem else "?"
            title = title_elem.get_text(strip=True) if title_elem else "?"

            logging.info(f"Raw date data: day={day}, month_raw={month_raw}")
            if month_elem:
                logging.info(f"Raw HTML for month: {month_elem}")

            month, weekday = "?", "?"
            if month_raw != "?":
                match = re.match(r'^([–∞-—è]{3,4})(?:,\s*([–∞-—è]{2}))?$', month_raw)
                if match:
                    month = match.group(1)
                    weekday = match.group(2) if match.group(2) else "?"
                else:
                    month = month_raw

            full_month = MONTHS.get(month, month)
            full_weekday = WEEKDAYS.get(weekday, weekday) if weekday != "?" else ""

            date_formatted = f"{day} {full_month} 2025" if day != "?" and month != "?" else "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
            if full_weekday:
                date_formatted += f", {full_weekday}"

            venue_emoji = "üèü" if "–î–∏–Ω–∞–º–æ-–ú–∏–Ω—Å–∫" in title.split(" ‚Äî ")[0] else "‚úàÔ∏è"

            msg = (
                f"üìÖ {date_formatted}\n"
                f"{venue_emoji} {title}\n"
                f"üïí {time_}\n"
            )
            if ticket_url:
                msg += f"üéü <a href='{ticket_url}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"
            matches.append(msg)
        return matches
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π: {e}")
        return []

# ---------------------- MONITORING ----------------------
async def monitor_matches():
    global matches_cache
    await asyncio.sleep(5)
    logging.info("üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π –∑–∞–ø—É—â–µ–Ω!")

    while True:
        try:
            current_matches = set(fetch_matches())
            added = current_matches - matches_cache
            removed = matches_cache - current_matches

            if added or removed:
                msg = "‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π:\n"
                if added:
                    msg += "\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ:\n" + "\n".join(added)
                if removed:
                    msg += "\n‚ûñ –£–¥–∞–ª–µ–Ω–æ:\n" + "\n".join(removed)

                for user_id in load_subscribers():
                    try:
                        await bot.send_message(user_id, msg)
                    except Exception as e:
                        logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
            else:
                logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")

            matches_cache = current_matches
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")

        await asyncio.sleep(CHECK_INTERVAL)

# ---------------------- KEEP AWAKE ----------------------
async def keep_awake():
    current_interval = 840  # 14 –º–∏–Ω—É—Ç
    min_interval = 300  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    await asyncio.sleep(10)
    while True:
        try:
            response = requests.get(APP_URL, timeout=5)
            if response.status_code == 200:
                logging.info(f"Keep-awake ping: status {response.status_code}")
                current_interval = 840
            else:
                logging.warning(f"Keep-awake –Ω–µ—É–¥–∞—á–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                current_interval = max(current_interval - 60, min_interval)
        except Exception as e:
            logging.error(f"Keep-awake error: {e}")
            current_interval = max(current_interval - 60, min_interval)
        await asyncio.sleep(current_interval)

# ---------------------- HANDLERS ----------------------
@dp.message()
async def handle_message(message: types.Message):
    if message.text == "/start":
        save_subscriber(message.from_user.id)
        matches = fetch_matches()
        msg = f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n–ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}"
        if matches:
            for match in matches:
                await bot.send_message(message.from_user.id, match)
        else:
            msg += "\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π."
        await message.answer(msg)
        logging.info(f"üìù –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {message.from_user.id}")

    elif message.text == "/stop":
        subs = load_subscribers()
        subs.discard(str(message.from_user.id))
        with open(subscribers_file, "w") as f:
            f.write("\n".join(subs))
        await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        logging.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø–∏—Å–∞–ª—Å—è.")

    elif message.text == "/status":
        last_check = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        status_msg = (
            f"üõ† –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(load_subscribers())}\n"
            f"üèí –ú–∞—Ç—á–µ–π –≤ –∫—ç—à–µ: {len(matches_cache)}\n"
            f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n"
            f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL} —Å–µ–∫"
        )
        await message.answer(status_msg)

# ---------------------- FLASK ROUTES ----------------------
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        update_data = request.get_json()
        update = Update(**update_data)
        asyncio.run_coroutine_threadsafe(dp.feed_update(bot, update), main_loop)
        return "OK"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return "Error", 500

@app.route("/", methods=["GET"])
def index():
    return jsonify({"status": "ok", "service": "hockey-monitor"})

@app.route("/version", methods=["GET"])
def version():
    return jsonify({"version": "2.3.5 - FIXED_404_AND_ENHANCED"})

# ---------------------- MAIN ----------------------
async def main():
    global main_loop
    main_loop = asyncio.get_running_loop()

    logging.info("üöÄ Starting application...")
    await bot.delete_webhook()

    webhook_url = "https://hockey-monitor.onrender.com/webhook"
    await bot.set_webhook(webhook_url)
    logging.info(f"üåç Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

    asyncio.create_task(monitor_matches())
    asyncio.create_task(keep_awake())

    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("‚õî Bot stopped")
