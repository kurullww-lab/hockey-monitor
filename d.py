import os
import json
import asyncio
import logging
import aiohttp
from aiogram import Bot
from bs4 import BeautifulSoup
from flask import Flask, request
import re
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
URL = "https://hcdinamo.by/tickets/"
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DATA_FILE = "matches.json"

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

bot = Bot(token=TELEGRAM_TOKEN)
app = Flask(__name__)

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# === –£–¢–ò–õ–ò–¢–´ ===
def normalize_text(text):
    return re.sub(r"\s+", " ", text.strip())

def load_previous_matches():
    if not os.path.exists(DATA_FILE):
        return []
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except Exception:
            return []

def save_matches(matches):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(matches, f, ensure_ascii=False, indent=2)

def same_match(a, b):
    return a["title"] == b["title"] and a["date"] == b["date"]

# === –ü–ê–†–°–ò–ù–ì ===
def parse_matches(html):
    soup = BeautifulSoup(html, "html.parser")
    items = soup.select("a.match-item")
    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ a.match-item: {len(items)}")

    matches = []
    for item in items:
        title_elem = item.select_one(".match-title, .match__title, h3, .title")
        title = normalize_text(title_elem.get_text()) if title_elem else ""

        date_elem = item.select_one(".match-day, .match-date, .match__info, time")
        date_text = normalize_text(date_elem.get_text()) if date_elem else ""

        if not date_text:
            full_text = item.get_text(" ", strip=True)
            m = re.search(r"(\d{1,2}\s[–∞-—è–ê-–Ø]+|\d{1,2}\.\d{1,2}\.\d{4}).*?(\d{1,2}:\d{2})", full_text)
            if m:
                date_text = f"{m.group(1)} {m.group(2)}"

        href = item.get("href", "")
        if href and href.startswith("/"):
            href = f"https://hcdinamo.by{href}"

        if title and date_text:
            matches.append({
                "title": title,
                "date": date_text,
                "url": href or URL
            })

    return matches

# === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===
async def broadcast(text, users):
    success, failed = 0, 0
    for user_id in users:
        try:
            await bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
            success += 1
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user_id}: {e}")
            failed += 1
    logger.info(f"üìä –ò—Ç–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏: ‚úÖ {success} —É—Å–ø–µ—à–Ω–æ, ‚ùå {failed} –æ—à–∏–±–æ–∫")

# === –ú–û–ù–ò–¢–û–†–ò–ù–ì ===
async def monitor():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Dinamo Tickets")
    prev_matches = load_previous_matches()
    logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –º–∞—Ç—á–µ–π: {len(prev_matches)}")

    while True:
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ {datetime.now().strftime('%H:%M:%S')}...")
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(URL) as resp:
                    html = await resp.text()

            matches = parse_matches(html)
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")

            if not matches:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π")
            else:
                added = [m for m in matches if not any(same_match(m, p) for p in prev_matches)]
                removed = [p for p in prev_matches if not any(same_match(p, m) for m in matches)]

                if added or removed:
                    msg = []
                    if added:
                        msg.append("‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã –º–∞—Ç—á–∏:\n" + "\n".join(
                            f"‚Ä¢ [{m['title']} ({m['date']})]({m['url']})" for m in added
                        ))
                    if removed:
                        msg.append("‚ûñ –£–¥–∞–ª–µ–Ω—ã –º–∞—Ç—á–∏:\n" + "\n".join(
                            f"‚Ä¢ [{m['title']} ({m['date']})]({m['url']})" for m in removed
                        ))

                    full_msg = "\n\n".join(msg)
                    logger.info(full_msg)
                    await broadcast(full_msg, [TELEGRAM_CHAT_ID])
                    prev_matches = matches
                    save_matches(matches)
                else:
                    logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

        logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL // 60} –º–∏–Ω.")
        await asyncio.sleep(CHECK_INTERVAL)

# === FLASK –°–ï–†–í–ï–† ===
@app.route("/")
def home():
    return "üèí Hockey Monitor Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route("/health")
def health():
    return "OK", 200

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    import threading

    def run_flask():
        port = int(os.getenv("PORT", 10000))
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
        app.run(host="0.0.0.0", port=port)

    threading.Thread(target=run_flask, daemon=True).start()
    asyncio.run(monitor())
