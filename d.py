import os
import json
import asyncio
import logging
from aiohttp import web, ClientSession
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# ===============================
# üîß –ù–ê–°–¢–†–û–ô–ö–ò
# ===============================
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = "https://hockey-monitor.onrender.com/webhook"
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))
SUBSCRIBERS_FILE = "subscribers.json"
MATCHES_FILE = "matches.json"
TARGET_URL = "https://hcdinamo.by/matches/"  # –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

# ===============================
# ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# ===============================
logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s - %(levelname)s - %(message)s")

# ===============================
# üß† –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê
# ===============================
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# ===============================
# üìÅ –£–¢–ò–õ–ò–¢–´
# ===============================
def load_json(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_subscribers():
    return load_json(SUBSCRIBERS_FILE)

def save_subscribers(subs):
    save_json(SUBSCRIBERS_FILE, subs)

def load_matches():
    return load_json(MATCHES_FILE)

def save_matches(matches):
    save_json(MATCHES_FILE, matches)

# ===============================
# üï∏ –ü–ê–†–°–ï–†
# ===============================
async def fetch_matches():
    async with ClientSession() as session:
        async with session.get(TARGET_URL, headers={"User-Agent": "Mozilla/5.0"}) as resp:
            html = await resp.text()
            logging.info(f"üìÑ –°—Ç–∞—Ç—É—Å: {resp.status}, –¥–ª–∏–Ω–∞ HTML: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
            if resp.status != 200:
                return []
            soup = BeautifulSoup(html, "html.parser")
            matches = []

            items = soup.select("a.match-item")
            logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ a.match-item: {len(items)}")

            for a in items:
                title_tag = a.select_one(".match-title")
                day = a.select_one(".match-day")
                month = a.select_one(".match-month")
                time = a.select_one(".match-times")
                link = a.get("href")

                if title_tag and day and month and time:
                    title = title_tag.text.strip()
                    date = f"{day.text.strip()} {month.text.strip()} {time.text.strip()}"
                    matches.append({
                        "title": title,
                        "date": date,
                        "link": link
                    })
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ title+date
            unique = {f"{m['title']}|{m['date']}": m for m in matches}
            logging.info(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π: {len(unique)}")
            return list(unique.values())

# ===============================
# üîÅ –ú–û–ù–ò–¢–û–†–ò–ù–ì
# ===============================
async def monitor_matches():
    logging.info("üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π –∑–∞–ø—É—â–µ–Ω!")
    while True:
        try:
            current = await fetch_matches()
            saved = load_matches()

            added = [m for m in current if m not in saved]
            removed = [m for m in saved if m not in current]

            if added or removed:
                logging.info(f"‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(added)}, —É–¥–∞–ª–µ–Ω–æ {len(removed)}")
                save_matches(current)
                await notify_subscribers(added, removed)
            else:
                logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        await asyncio.sleep(CHECK_INTERVAL)

# ===============================
# üì£ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
# ===============================
async def notify_subscribers(added, removed):
    subs = load_subscribers()
    if not subs:
        logging.info("‚ùï –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return

    for chat_id in subs:
        if added:
            for match in added:
                msg = (
                    f"üìÖ <b>{match['date']}</b>\n"
                    f"üèí {match['title']}\n"
                    f"üéü <a href='{match['link']}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"
                )
                await bot.send_message(chat_id, msg)

        if removed:
            for match in removed:
                msg = f"‚ö†Ô∏è –ú–∞—Ç—á —É–¥–∞–ª—ë–Ω: {match['title']} ({match['date']})"
                await bot.send_message(chat_id, msg)

# ===============================
# ü§ñ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ===============================
@dp.message()
async def start_handler(message: types.Message):
    if message.text == "/start":
        subs = load_subscribers()
        if message.chat.id not in subs:
            subs.append(message.chat.id)
            save_subscribers(subs)
            logging.info(f"üìù –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {message.chat.id}")

        matches = load_matches()
        if matches:
            text = "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç—á–∏:\n\n"
            for m in matches:
                text += f"üìÖ {m['date']}\nüèí {m['title']}\nüéü <a href='{m['link']}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>\n\n"
        else:
            text = "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π."

        await message.answer(text)

    elif message.text == "/stop":
        subs = load_subscribers()
        if message.chat.id in subs:
            subs.remove(message.chat.id)
            save_subscribers(subs)
            await message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        else:
            await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# ===============================
# üåç –í–ï–ë-–°–ï–†–í–ï–† (WEBHOOK)
# ===============================
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    asyncio.create_task(monitor_matches())
    logging.info(f"üåç Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(app):
    await bot.delete_webhook()
    logging.info("üßπ Webhook —É–¥–∞–ª—ë–Ω")

async def handle_webhook(request):
    try:
        update = types.Update.model_validate(await request.json())
        await dp.feed_update(bot, update)
        return web.Response(status=200, text="OK")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return web.Response(status=500, text=str(e))

app = web.Application()
app.router.add_post("/webhook", handle_webhook)
app.router.add_get("/", lambda _: web.Response(text="‚úÖ Bot is running"))
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

# ===============================
# üöÄ –ó–ê–ü–£–°–ö
# ===============================
if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=10000)
