import os
import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.default import DefaultBotProperties
from bs4 import BeautifulSoup
from flask import Flask, jsonify
import re
import json
import time

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))
URL = "https://hcdinamo.by/tickets/"
APP_URL = "https://hockey-monitor.onrender.com/"

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === Flask ===
app = Flask(__name__)

@app.route('/')
def index():
    return jsonify({"status": "ok", "service": "hockey-monitor"})

@app.route('/version')
def version():
    return jsonify({"version": "2.3.3 - FIXED_SIGTERM_AND_NOTIFICATIONS"})

@app.route('/subscribers')
def get_subscribers():
    try:
        subs = load_subscribers()
        return jsonify({"subscribers": list(subs)})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        return jsonify({"error": str(e)}), 500

# === Telegram bot ===
session = AiohttpSession()
bot = Bot(
    token=BOT_TOKEN,
    session=session,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# === –ü–∞–º—è—Ç—å ===
subscribers_file = "subscribers.txt"
last_matches = []
last_message_time = {}  # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–µ—Å—è—Ü–µ–≤
MONTHS = {
    "—è–Ω–≤": "—è–Ω–≤–∞—Ä—è",
    "—Ñ–µ–≤": "—Ñ–µ–≤—Ä–∞–ª—è",
    "–º–∞—Ä": "–º–∞—Ä—Ç–∞",
    "–∞–ø—Ä": "–∞–ø—Ä–µ–ª—è",
    "–º–∞–π": "–º–∞—è",
    "–∏—é–Ω": "–∏—é–Ω—è",
    "–∏—é–ª": "–∏—é–ª—è",
    "–∞–≤–≥": "–∞–≤–≥—É—Å—Ç–∞",
    "—Å–µ–Ω": "—Å–µ–Ω—Ç—è–±—Ä—è",
    "–æ–∫—Ç": "–æ–∫—Ç—è–±—Ä—è",
    "–Ω–æ—è": "–Ω–æ—è–±—Ä—è",
    "–¥–µ–∫": "–¥–µ–∫–∞–±—Ä—è"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
WEEKDAYS = {
    "–ø–Ω": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "–≤—Ç": "–í—Ç–æ—Ä–Ω–∏–∫",
    "—Å—Ä": "–°—Ä–µ–¥–∞",
    "—á—Ç": "–ß–µ—Ç–≤–µ—Ä–≥",
    "–ø—Ç": "–ü—è—Ç–Ω–∏—Ü–∞",
    "—Å–±": "–°—É–±–±–æ—Ç–∞",
    "–≤—Å": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ ===
def load_subscribers():
    if not os.path.exists(subscribers_file):
        return set()
    try:
        with open(subscribers_file, "r") as f:
            return set(f.read().splitlines())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        return set()

def save_subscriber(user_id):
    subs = load_subscribers()
    subs.add(str(user_id))
    try:
        with open(subscribers_file, "w") as f:
            f.write("\n".join(subs))
        logging.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ {user_id}: {e}")

# === –ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç—á–µ–π ===
async def fetch_matches():
    retries = 5
    for attempt in range(retries):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(URL, timeout=20) as resp:
                    if resp.status != 200:
                        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ({resp.status}) –¥–ª—è URL: {URL}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                        response_text = await resp.text()
                        logging.warning(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_text[:100]}...")
                        continue
                    html = await resp.text()

            soup = BeautifulSoup(html, 'html.parser')
            match_items = soup.select("a.match-item")
            logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(match_items)}")

            matches = []
            for item in match_items:
                day_elem = item.select_one(".match-day")
                month_elem = item.select_one(".match-month")
                time_elem = item.select_one(".match-times")
                title_elem = item.select_one(".match-title")
                ticket = item.select_one(".btn.tickets-w_t")
                ticket_url = ticket.get("data-w_t") if ticket else None

                day = day_elem.get_text(strip=True) if day_elem else "?"
                month_raw = month_elem.get_text(strip=True).lower() if month_elem else "?"
                time_ = time_elem.get_text(strip=True) if time_elem else "?"
                title = title_elem.get_text(strip=True) if title_elem else "?"

                logging.info(f"Raw date data: day={day}, month_raw={month_raw}")
                if month_elem:
                    logging.info(f"Raw HTML for month: {month_elem}")

                month, weekday = "?", "?"
                if month_raw != "?":
                    match = re.match(r'^([–∞-—è]{3,4})(?:,\s*([–∞-—è]{2}))?$', month_raw, re.IGNORECASE)
                    if match:
                        month = match.group(1)
                        weekday = match.group(2) if match.group(2) else "?"
                    else:
                        month = month_raw

                full_month = MONTHS.get(month, month)
                full_weekday = WEEKDAYS.get(weekday, weekday) if weekday != "?" else ""

                date_formatted = f"{day} {full_month} 2025" if day != "?" and month != "?" else "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
                if full_weekday:
                    date_formatted += f", {full_weekday}"

                msg = (
                    f"üìÖ {date_formatted}\n"
                    f"üèí {title}\n"
                    f"üïí {time_}\n"
                )
                if ticket_url:
                    msg += f"üéü <a href='{ticket_url}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"
                matches.append(msg)
            
            logging.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –º–∞—Ç—á–µ–π –∏–∑ fetch_matches: {len(matches)}")
            return matches
        except aiohttp.ClientError as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}/{retries}: {e}")
            if attempt < retries - 1:
                await asyncio.sleep(5)
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
    logging.warning("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à")
    return last_matches

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===
async def monitor_matches():
    global last_matches
    await asyncio.sleep(5)
    logging.info("üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π –∑–∞–ø—É—â–µ–Ω!")
    while True:
        try:
            current_matches = await fetch_matches()
            if current_matches != last_matches:
                added = [m for m in current_matches if m not in last_matches]
                removed = [m for m in last_matches if m not in current_matches]

                if added or removed:
                    msg = "‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π:\n"
                    if added:
                        msg += "\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ:\n" + "\n".join(added[:5])
                    if removed:
                        msg += "\n‚ûñ –£–¥–∞–ª–µ–Ω–æ:\n" + "\n".join(removed[:5])
                    await notify_all([msg])
                last_matches = current_matches
                logging.info(f"üîî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ {len(added)} –Ω–æ–≤—ã—Ö –∏ {len(removed)} —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö")
            else:
                logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
        await asyncio.sleep(CHECK_INTERVAL)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
async def notify_all(messages, chat_ids=None):
    subscribers = load_subscribers() if chat_ids is None else set(chat_ids)
    if not subscribers:
        logging.info("‚ùï –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return
    for chat_id in subscribers:
        for msg in messages:
            try:
                await bot.send_message(chat_id, msg)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {msg[:50]}...")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    user_id = message.chat.id
    current_time = time.time()
    if user_id in last_message_time and current_time - last_message_time[user_id] < 60:
        logging.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π /start –¥–ª—è {user_id}")
        return
    last_message_time[user_id] = current_time

    save_subscriber(user_id)
    logging.info(f"üìù –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")
    await message.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫! üèí\n–ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(last_matches)}")
    matches = await fetch_matches()
    if matches:
        await notify_all(matches[:5], [user_id])
        if len(matches) > 5:
            await message.answer(f"...–∏ –µ—â—ë {len(matches) - 5} –º–∞—Ç—á–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /matches –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π.")

@dp.message(Command("stop"))
async def stop_cmd(message: types.Message):
    user_id = message.chat.id
    subscribers = load_subscribers()
    subscribers.discard(str(user_id))
    try:
        with open(subscribers_file, "w") as f:
            f.write("\n".join(subscribers))
        await message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        logging.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("matches"))
async def matches_cmd(message: types.Message):
    matches = await fetch_matches()
    if matches:
        await notify_all(matches, [message.chat.id])
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π.")

@dp.message(Command("status"))
async def status_cmd(message: types.Message):
    last_check = time.strftime("%Y-%m-%d %H:%M:%S")
    status_msg = (
        f"üõ† –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n"
        f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(load_subscribers())}\n"
        f"üèí –ú–∞—Ç—á–µ–π –≤ –∫—ç—à–µ: {len(last_matches)}\n"
        f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n"
        f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL} —Å–µ–∫"
    )
    await message.answer(status_msg)

# === –°–∞–º–æ–ø–∏–Ω–≥ ===
async def keep_awake():
    current_interval = 840  # 14 –º–∏–Ω—É—Ç
    min_interval = 300  # 5 –º–∏–Ω—É—Ç
    await asyncio.sleep(60)
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(APP_URL, timeout=5) as resp:
                    response_text = await resp.text()
                    if resp.status == 200:
                        logging.info(f"Keep-awake ping: status {resp.status}, response: {response_text[:50]}...")
                        current_interval = 840
                    else:
                        logging.warning(f"Keep-awake –Ω–µ—É–¥–∞—á–∞: —Å—Ç–∞—Ç—É—Å {resp.status}, response: {response_text[:50]}...")
                        current_interval = max(current_interval - 60, min_interval)
        except Exception as e:
            logging.error(f"Keep-awake error: {e}")
            current_interval = max(current_interval - 60, min_interval)
        await asyncio.sleep(current_interval)

# === –ó–∞–ø—É—Å–∫ ===
async def run_aiogram():
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("üåê Webhook —É–¥–∞–ª—ë–Ω, –≤–∫–ª—é—á–µ–Ω polling —Ä–µ–∂–∏–º.")
    asyncio.create_task(monitor_matches())
    asyncio.create_task(keep_awake())
    await dp.start_polling(bot)

def run_flask():
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 10000)))

async def main():
    loop = asyncio.get_event_loop()
    loop.run_in_executor(None, run_flask)
    await run_aiogram()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("‚õî Bot stopped")
