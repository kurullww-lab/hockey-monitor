import os
import re
import time
import json
import asyncio
import logging
import requests
from datetime import datetime
from flask import Flask
from bs4 import BeautifulSoup
from aiogram import Bot

# =============================
# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# =============================

URL = "https://hcdinamo.by/tickets/"
FALLBACK_URL = "https://r.jina.ai/http://hcdinamo.by/tickets/"
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

app = Flask(__name__)
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_TOKEN)

# =============================
# üß© –ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç—á–µ–π
# =============================

def get_html(url):
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                      "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0 Safari/537.36",
        "Accept-Language": "ru-RU,ru;q=0.9,en;q=0.8",
    }
    try:
        response = requests.get(url, headers=headers, timeout=20)
        response.raise_for_status()
        return response.text
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ HTML: {e}")
        return ""


def normalize_text(text):
    return re.sub(r"\s+", " ", text.strip())


def parse_matches(html):
    soup = BeautifulSoup(html, "html.parser")
    items = soup.select("a.match-item")
    logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ a.match-item: {len(items)}")

    matches = []
    for item in items:
        # –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞
        title_elem = item.select_one(".match-title, .match__title, h3, .title")
        title = normalize_text(title_elem.get_text()) if title_elem else ""

        # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        date_elem = item.select_one(".match-day, .match-date, .match__info, time")
        date_text = normalize_text(date_elem.get_text()) if date_elem else ""

        # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Ç–∞—â–∏—Ç—å –¥–∞—Ç—É –∏–∑ –æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ —Å–∞–π—Ç –∏–∑–º–µ–Ω–∏–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
        if not date_text:
            full_text = item.get_text(" ", strip=True)
            m = re.search(r"(\d{1,2}\s[–∞-—è–ê-–Ø]+|\d{1,2}\.\d{1,2}\.\d{4}).*?(\d{1,2}:\d{2})", full_text)
            if m:
                date_text = f"{m.group(1)} {m.group(2)}"

        # –°—Å—ã–ª–∫–∞
        href = item.get("href", "")
        if href and href.startswith("/"):
            href = f"https://hcdinamo.by{href}"

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        if title and date_text:
            matches.append({
                "title": title,
                "date": date_text,
                "url": href or URL
            })

    return matches


async def fetch_matches():
    html = get_html(URL)

    # fallback, –µ—Å–ª–∏ Cloudflare
    if not html or "cf-challenge" in html or "Cloudflare" in html:
        logger.warning("‚ö†Ô∏è Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –∑–µ—Ä–∫–∞–ª–æ...")
        html = get_html(FALLBACK_URL)

    if not html:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTML")
        return []

    matches = parse_matches(html)
    logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")
    for i, m in enumerate(matches, 1):
        logger.info(f"   {i:2d}. {m['title']} ‚Äî {m['date']}")
    return matches


# =============================
# üí¨ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
# =============================

async def send_message(text: str):
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        logger.warning("‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID")
        return
    try:
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)
        logger.info(f"üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")


# =============================
# üîÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
# =============================

async def monitor():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Dinamo Tickets")

    previous = []
    while True:
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ {datetime.now().strftime('%H:%M:%S')}...")
        current = await fetch_matches()

        if not current:
            logger.warning("‚ö†Ô∏è –ú–∞—Ç—á–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∑–∂–µ.")
        else:
            added = [m for m in current if m not in previous]
            removed = [m for m in previous if m not in current]

            if added or removed:
                msg = []
                if added:
                    msg.append("‚ûï –î–æ–±–∞–≤–ª–µ–Ω—ã –º–∞—Ç—á–∏:\n" + "\n".join(f"‚Ä¢ {m['title']} ({m['date']})" for m in added))
                if removed:
                    msg.append("‚ûñ –£–¥–∞–ª–µ–Ω—ã –º–∞—Ç—á–∏:\n" + "\n".join(f"‚Ä¢ {m['title']} ({m['date']})" for m in removed))
                await send_message("\n\n".join(msg))
                previous = current
            else:
                logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")

        logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL // 60} –º–∏–Ω.\n")
        await asyncio.sleep(CHECK_INTERVAL)


# =============================
# üåê Flask Web
# =============================

@app.route("/")
def index():
    return "‚úÖ Hockey Monitor Bot is running!"

@app.route("/health")
def health():
    return {"status": "ok"}, 200


# =============================
# üöÄ –ó–∞–ø—É—Å–∫
# =============================

if __name__ == "__main__":
    port = int(os.getenv("PORT", 10000))
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}")

    loop = asyncio.get_event_loop()
    loop.create_task(monitor())

    from threading import Thread
    Thread(target=lambda: app.run(host="0.0.0.0", port=port)).start()

    loop.run_forever()
