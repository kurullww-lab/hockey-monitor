import os
import re
import asyncio
import logging
import aiohttp
from aiohttp import web
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "300"))  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω)
BASE_URL = "https://hcdinamo.by/tickets/"
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"https://hockey-monitor.onrender.com{WEBHOOK_PATH}"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===
subscribers = set()
previous_matches = []

# === –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Ç—á–µ–π ===
async def fetch_matches():
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(BASE_URL, headers=headers) as response:
                html = await response.text()
                logging.info(f"üìÑ –°—Ç–∞—Ç—É—Å: {response.status}, –¥–ª–∏–Ω–∞ HTML: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")
                logging.debug(f"üîé –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ HTML:\n{html[:300]}")

                if response.status != 200:
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status}")
                    return []

                soup = BeautifulSoup(html, "html.parser")

                # –∏—â–µ–º –≤—Å–µ —Ç–µ–≥–∏ <a class="match-item"> –≤–Ω–µ –∞—Ä—Ö–∏–≤–æ–≤
                matches_raw = [
                    tag for tag in soup.find_all("a", class_=re.compile("match-item"))
                    if "archive" not in (tag.get("class") or []) and "hidden" not in (tag.get("class") or [])
                ]

                logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ a.match-item: {len(matches_raw)}")

                matches = []
                seen = set()

                for tag in matches_raw:
                    day = tag.select_one(".match-day")
                    month = tag.select_one(".match-month")
                    time = tag.select_one(".match-times")
                    title = tag.select_one(".match-title")

                    if not (day and month and time and title):
                        continue

                    link = tag.get("href") or tag.get("data-w_t")
                    if not link:
                        continue

                    link = link if link.startswith("http") else f"https://hcdinamo.by{link}"
                    key = (title.text.strip(), link)
                    if key in seen:
                        continue
                    seen.add(key)

                    matches.append({
                        "day": day.text.strip(),
                        "month": month.text.strip(),
                        "time": time.text.strip(),
                        "title": title.text.strip(),
                        "url": link
                    })

                logging.info(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π: {len(matches)}")
                return matches

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return []

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ===
@dp.message(F.text == "/start")
async def start_handler(message: types.Message):
    chat_id = message.chat.id
    subscribers = load_subscribers()

    if chat_id not in subscribers:
        subscribers.append(chat_id)
        save_subscribers(subscribers)
        logging.info(f"üìù –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id}")

    await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫!")

    # —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
    matches = await fetch_matches()
    if not matches:
        await message.answer("‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π –Ω–∞ —Å–∞–π—Ç–µ.")
    else:
        text = "üìÖ –¢–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏:\n\n" + "\n".join(
            [f"{m['day']} {m['month']} ({m['time']}) ‚Äî {m['title']}\n{m['url']}" for m in matches]
        )
        await message.answer(text[:4000])

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–∞—Ç—á–µ–π ===
async def check_for_updates():
    global previous_matches

    matches = await fetch_matches()
    if not matches:
        logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç (–∏–ª–∏ —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        return

    if matches != previous_matches:
        added = [m for m in matches if m not in previous_matches]
        removed = [m for m in previous_matches if m not in matches]
        previous_matches = matches

        if added or removed:
            logging.info(f"‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(added)}, —É–¥–∞–ª–µ–Ω–æ {len(removed)}")

            for chat_id in subscribers:
                # –ù–æ–≤—ã–µ –º–∞—Ç—á–∏
                for m in added:
                    msg = (
                        f"üìÖ <b>{m['day']} {m['month']}</b> {m['time']}\n"
                        f"üèí {m['title']}\n"
                        f"üéü <a href='{m['url']}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"
                    )
                    try:
                        await bot.send_message(chat_id, msg)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                # –£–¥–∞–ª—ë–Ω–Ω—ã–µ –º–∞—Ç—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞—á–∞–ª–∏—Å—å)
                for m in removed:
                    msg = (
                        f"‚ùå –ú–∞—Ç—á —É–¥–∞–ª—ë–Ω —Å —Å–∞–π—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∞—á–∞–ª—Å—è)\n"
                        f"üìÖ <b>{m['day']} {m['month']}</b> {m['time']}\n"
                        f"üèí {m['title']}"
                    )
                    try:
                        await bot.send_message(chat_id, msg)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    else:
        logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")

# === –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ===
async def scheduler():
    while True:
        await check_for_updates()
        await asyncio.sleep(CHECK_INTERVAL)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.chat.id
    if user_id not in subscribers:
        subscribers.add(user_id)
        await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫!")
        logging.info(f"üìù –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")
    else:
        await message.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

@dp.message(Command("stop"))
async def cmd_stop(message: types.Message):
    user_id = message.chat.id
    if user_id in subscribers:
        subscribers.remove(user_id)
        await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        logging.info(f"üö´ –ü–æ–¥–ø–∏—Å—á–∏–∫ —É–¥–∞–ª—ë–Ω: {user_id}")
    else:
        await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# === Flask-like —Å–µ—Ä–≤–µ—Ä –¥–ª—è Webhook ===
async def handle_webhook(request):
    try:
        update = await request.json()
        await dp.feed_webhook_update(bot, update)
        return web.Response(text="ok")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return web.Response(status=500)

async def start_bot():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.router.add_get("/", lambda request: web.Response(text="Bot is running!"))

    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"üåç Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    asyncio.create_task(scheduler())

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 10000)
    await site.start()

    logging.info("üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π –∑–∞–ø—É—â–µ–Ω!")
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    asyncio.run(start_bot())
