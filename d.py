import os
import asyncio
import logging
import threading
import aiohttp
from flask import Flask, request, jsonify
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Update
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from bs4 import BeautifulSoup
import re
import datetime
import json

# ---------------------- CONFIG ----------------------
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "300"))
URL = "https://hcdinamo.by/tickets/"
APP_URL = "https://hockey-monitor.onrender.com/version"
MATCHES_CACHE_FILE = "matches_cache.json"

# ---------------------- LOGGING ----------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ---------------------- INIT ----------------------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
app = Flask(__name__)

matches_cache = []
subscribers_file = "subscribers.txt"
main_loop = None

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–µ—Å—è—Ü–µ–≤
MONTHS = {
    "—è–Ω–≤": "—è–Ω–≤–∞—Ä—è",
    "—Ñ–µ–≤": "—Ñ–µ–≤—Ä–∞–ª—è",
    "–º–∞—Ä": "–º–∞—Ä—Ç–∞",
    "–∞–ø—Ä": "–∞–ø—Ä–µ–ª—è",
    "–º–∞–π": "–º–∞—è",
    "–∏—é–Ω": "–∏—é–Ω—è",
    "–∏—é–ª": "–∏—é–ª—è",
    "–∞–≤–≥": "–∞–≤–≥—É—Å—Ç–∞",
    "—Å–µ–Ω": "—Å–µ–Ω—Ç—è–±—Ä—è",
    "–æ–∫—Ç": "–æ–∫—Ç—è–±—Ä—è",
    "–Ω–æ—è": "–Ω–æ—è–±—Ä—è",
    "–¥–µ–∫": "–¥–µ–∫–∞–±—Ä—è"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
WEEKDAYS = {
    "–ø–Ω": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "–≤—Ç": "–í—Ç–æ—Ä–Ω–∏–∫",
    "—Å—Ä": "–°—Ä–µ–¥–∞",
    "—á—Ç": "–ß–µ—Ç–≤–µ—Ä–≥",
    "–ø—Ç": "–ü—è—Ç–Ω–∏—Ü–∞",
    "—Å–±": "–°—É–±–±–æ—Ç–∞",
    "–≤—Å": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

# ---------------------- CACHE MANAGEMENT ----------------------
def load_matches_cache():
    if not os.path.exists(MATCHES_CACHE_FILE):
        return []
    try:
        with open(MATCHES_CACHE_FILE, "r") as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –º–∞—Ç—á–µ–π: {e}")
        return []

def save_matches_cache(matches):
    try:
        with open(MATCHES_CACHE_FILE, "w") as f:
            json.dump(matches, f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –º–∞—Ç—á–µ–π: {e}")

# ---------------------- SUBSCRIBERS ----------------------
def load_subscribers():
    if not os.path.exists(subscribers_file):
        return set()
    with open(subscribers_file, "r") as f:
        return set(f.read().splitlines())

def save_subscriber(user_id):
    subs = load_subscribers()
    subs.add(str(user_id))
    with open(subscribers_file, "w") as f:
        f.write("\n".join(subs))
    logging.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")

# ---------------------- PARSING ----------------------
async def fetch_matches():
    retries = 3
    for attempt in range(retries):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(URL, timeout=15) as resp:
                    if resp.status != 200:
                        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ({resp.status}) –¥–ª—è URL: {URL}")
                        continue
                    html = await resp.text()

            soup = BeautifulSoup(html, 'html.parser')
            match_items = soup.select("a.match-item")
            logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(match_items)}")

            matches = []
            for item in match_items:
                day_elem = item.select_one(".match-day")
                month_elem = item.select_one(".match-month")
                time_elem = item.select_one(".match-times")
                title_elem = item.select_one(".match-title")
                ticket = item.select_one(".btn.tickets-w_t")
                ticket_url = ticket.get("data-w_t") if ticket else None

                day = day_elem.get_text(strip=True) if day_elem else "?"
                month_raw = month_elem.get_text(strip=True).lower() if month_elem else "?"
                time_ = time_elem.get_text(strip=True) if time_elem else "?"
                title = title_elem.get_text(strip=True) if title_elem else "?"

                logging.info(f"Raw date data: day={day}, month_raw={month_raw}")
                if month_elem:
                    logging.info(f"Raw HTML for month: {month_elem}")

                month, weekday = "?", "?"
                if month_raw != "?":
                    match = re.match(r'^([–∞-—è]{3,4})(?:,\s*([–∞-—è]{2}))?$', month_raw, re.IGNORECASE)
                    if match:
                        month = match.group(1).lower()
                        weekday = match.group(2).lower() if match.group(2) else "?"
                    else:
                        month = month_raw.lower()

                full_month = MONTHS.get(month, month)
                full_weekday = WEEKDAYS.get(weekday, weekday) if weekday != "?" else ""

                date_formatted = f"{day} {full_month} 2025" if day != "?" and month != "?" else "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
                if full_weekday:
                    date_formatted += f", {full_weekday}"

                venue_emoji = "üèü" if "–î–∏–Ω–∞–º–æ-–ú–∏–Ω—Å–∫" in title.split(" ‚Äî ")[0] else "‚úàÔ∏è"

                msg = (
                    f"üìÖ {date_formatted}\n"
                    f"{venue_emoji} {title}\n"
                    f"üïí {time_}\n"
                )
                if ticket_url:
                    msg += f"üéü <a href='{ticket_url}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"

                match_key = f"{date_formatted}|{title}|{time_}"
                matches.append((match_key, msg))
            
            matches.sort(key=lambda x: x[0])
            return [msg for _, msg in matches]
        except aiohttp.ClientError as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}/{retries}: {e}")
            if attempt < retries - 1:
                await asyncio.sleep(5)
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            return []
    logging.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
    return []

# ---------------------- MONITORING ----------------------
async def monitor_matches():
    global matches_cache
    matches_cache = load_matches_cache()
    await asyncio.sleep(5)
    logging.info("üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π –∑–∞–ø—É—â–µ–Ω!")

    while True:
        try:
            current_matches = await fetch_matches()
            current_keys = {f"{msg}" for msg in current_matches}
            cached_keys = {f"{msg}" for msg in matches_cache}

            added = [msg for msg in current_matches if f"{msg}" not in cached_keys]
            removed = [msg for msg in matches_cache if f"{msg}" not in current_keys]

            if added or removed:
                msg = "‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π:\n"
                if added:
                    msg += "\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ:\n" + "\n".join(added)
                if removed:
                    msg += "\n‚ûñ –£–¥–∞–ª–µ–Ω–æ:\n" + "\n".join(removed)

                for user_id in load_subscribers():
                    try:
                        await bot.send_message(user_id, msg)
                        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    except Exception as e:
                        logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
                logging.info(f"üîî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ {len(added)} –Ω–æ–≤—ã—Ö –∏ {len(removed)} —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö")
                matches_cache = current_matches
                save_matches_cache(matches_cache)
            else:
                logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")

        await asyncio.sleep(CHECK_INTERVAL)

# ---------------------- KEEP AWAKE ----------------------
async def keep_awake():
    current_interval = 840  # 14 –º–∏–Ω—É—Ç
    min_interval = 300  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    await asyncio.sleep(60)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(APP_URL, timeout=5) as resp:
                    response_text = await resp.text()
                    if resp.status == 200:
                        logging.info(f"Keep-awake ping: status {resp.status}, response: {response_text[:50]}...")
                        current_interval = 840
                    else:
                        logging.warning(f"Keep-awake –Ω–µ—É–¥–∞—á–∞: —Å—Ç–∞—Ç—É—Å {resp.status}, response: {response_text[:50]}...")
                        current_interval = max(current_interval - 60, min_interval)
        except Exception as e:
            logging.error(f"Keep-awake error: {e}")
            current_interval = max(current_interval - 60, min_interval)
        await asyncio.sleep(current_interval)

# ---------------------- HANDLERS ----------------------
@dp.message()
async def handle_message(message: types.Message):
    if message.text == "/start":
        save_subscriber(message.from_user.id)
        matches = await fetch_matches()
        msg = f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n–ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}"
        await message.answer(msg)
        if matches:
            for match in matches:
                await bot.send_message(message.from_user.id, match)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–∞—Ç—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {match[:50]}...")
        else:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π.")
        logging.info(f"üìù –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {message.from_user.id}")

    elif message.text == "/stop":
        subs = load_subscribers()
        subs.discard(str(message.from_user.id))
        with open(subscribers_file, "w") as f:
            f.write("\n".join(subs))
        await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        logging.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø–∏—Å–∞–ª—Å—è.")

    elif message.text == "/status":
        last_check = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        status_msg = (
            f"üõ† –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(load_subscribers())}\n"
            f"üèí –ú–∞—Ç—á–µ–π –≤ –∫—ç—à–µ: {len(matches_cache)}\n"
            f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n"
            f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL} —Å–µ–∫"
        )
        await message.answer(status_msg)

# ---------------------- FLASK ROUTES ----------------------
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        update_data = request.get_json()
        update = Update(**update_data)
        asyncio.run_coroutine_threadsafe(dp.feed_update(bot, update), main_loop)
        return "OK"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return "Error", 500

@app.route("/", methods=["GET"])
def index():
    return jsonify({"status": "ok", "service": "hockey-monitor"})

@app.route("/version", methods=["GET"])
def version():
    return jsonify({"version": "2.3.7 - FIXED_PING_AND_NOTIFICATIONS"})

# ---------------------- MAIN ----------------------
async def main():
    global main_loop
    main_loop = asyncio.get_running_loop()

    logging.info("üöÄ Starting application...")
    await bot.delete_webhook()

    webhook_url = "https://hockey-monitor.onrender.com/webhook"
    await bot.set_webhook(webhook_url)
    logging.info(f"üåç Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

    asyncio.create_task(monitor_matches())
    asyncio.create_task(keep_awake())

    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("‚õî Bot stopped")
        save_matches_cache(matches_cache)
