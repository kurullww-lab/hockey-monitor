import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiohttp import web
import aiohttp
from bs4 import BeautifulSoup
import json
import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–û–í ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN –≤ Environment!")

# === –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê ===
bot = Bot(token=BOT_TOKEN, default=types.DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
MATCHES_FILE = "matches.json"
SUBSCRIBERS_FILE = "subscribers.json"
CHECK_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def load_json(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_json(file_path, data):
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def fetch_matches():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    url = "https://hcdinamo.by/local/ajax/tickets_list.php"
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/124.0.0.0 Safari/537.36"
        ),
        "Referer": "https://hcdinamo.by/tickets/",
        "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Connection": "keep-alive"
    }

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, headers=headers, timeout=30) as resp:
                html = await resp.text()
                logging.info(f"üìÑ –°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ {resp.status}, –¥–ª–∏–Ω–∞ HTML: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤")

                if resp.status != 200:
                    return []

                soup = BeautifulSoup(html, "html.parser")
                matches_html = soup.select("a.match-item")
                logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ a.match-item: {len(matches_html)}")

                matches = []
                for i, match in enumerate(matches_html, 1):
                    date = match.select_one(".match__date")
                    if not date:
                        continue
                    parts = date.text.strip().split()
                    if len(parts) < 4:
                        continue
                    day, month, day_of_week, time = parts[:4]
                    match_text = f"{day} {month} {day_of_week} {time}"
                    home_team = match.select_one(".match__team--home").text.strip()
                    away_team = match.select_one(".match__team--away").text.strip()
                    ticket_link = match.get("href")
                    matches.append({
                        "date": match_text,
                        "teams": f"{home_team} ‚Äî {away_team}",
                        "ticket_link": f"https://hcdinamo.by{ticket_link}"
                    })
                    logging.info(f"üîç –ú–∞—Ç—á {i}: {match_text}, {home_team} vs {away_team}")

                logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")
                return matches

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π: {e}")
            return []

async def notify_subscribers(message_text):
    subscribers = load_json(SUBSCRIBERS_FILE)
    for user_id in subscribers:
        try:
            await bot.send_message(user_id, message_text)
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")

# === –ú–û–ù–ò–¢–û–†–ò–ù–ì ===

async def monitor_matches():
    logging.info("üèÅ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Ç—á–µ–π –∑–∞–ø—É—â–µ–Ω!")
    old_matches = load_json(MATCHES_FILE)

    while True:
        new_matches = await fetch_matches()
        if not new_matches:
            logging.info("‚ö†Ô∏è –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–º–æ–∂–Ω–æ —Å–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            await asyncio.sleep(CHECK_INTERVAL)
            continue

        if new_matches != old_matches:
            logging.info("üîî –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –º–∞—Ç—á–µ–π!")
            save_json(MATCHES_FILE, new_matches)

            added = [m for m in new_matches if m not in old_matches]
            removed = [m for m in old_matches if m not in new_matches]

            message_parts = []
            if added:
                for match in added:
                    message_parts.append(
                        f"üÜï –ù–æ–≤—ã–π –º–∞—Ç—á!\nüìÖ {match['date']}\nüèí {match['teams']}\nüéü <a href='{match['ticket_link']}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"
                    )
            if removed:
                for match in removed:
                    message_parts.append(
                        f"‚è∞ –ú–∞—Ç—á —É–¥–∞–ª—ë–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∏–¥—ë—Ç):\nüìÖ {match['date']}\nüèí {match['teams']}"
                    )

            if message_parts:
                await notify_subscribers("\n\n".join(message_parts))

        else:
            logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")

        old_matches = new_matches
        await asyncio.sleep(CHECK_INTERVAL)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

@dp.message(Command("start"))
async def start_command(message: types.Message):
    subscribers = load_json(SUBSCRIBERS_FILE)
    if message.from_user.id not in subscribers:
        subscribers.append(message.from_user.id)
        save_json(SUBSCRIBERS_FILE, subscribers)

    await message.answer(
        "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫!\n\n"
        "–ë—É–¥—É —Å–æ–æ–±—â–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üèí"
    )

    # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
    matches = load_json(MATCHES_FILE)
    if matches:
        for match in matches:
            await message.answer(
                f"üìÖ {match['date']}\nüèí {match['teams']}\nüéü <a href='{match['ticket_link']}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"
            )
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–∞—Ö.")

@dp.message(Command("stop"))
async def stop_command(message: types.Message):
    subscribers = load_json(SUBSCRIBERS_FILE)
    if message.from_user.id in subscribers:
        subscribers.remove(message.from_user.id)
        save_json(SUBSCRIBERS_FILE, subscribers)
        await message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚öôÔ∏è")
    else:
        await message.answer("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# === WEBHOOK (–¥–ª—è Render) ===

async def on_startup(app):
    webhook_url = f"https://hockey-monitor.onrender.com/webhook"
    await bot.set_webhook(webhook_url)
    logging.info(f"üåç Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    asyncio.create_task(monitor_matches())

async def on_shutdown(app):
    await bot.delete_webhook()
    logging.info("‚ùå Webhook —É–¥–∞–ª—ë–Ω")

async def handle_webhook(request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return web.Response(text="ok")

async def handle_root(request):
    return web.Response(text="Hockey monitor is running ‚úÖ")

# === –ó–ê–ü–£–°–ö ===

def main():
    app = web.Application()
    app.router.add_post("/webhook", handle_webhook)
    app.router.add_get("/", handle_root)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    web.run_app(app, port=10000)

if __name__ == "__main__":
    main()
