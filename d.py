import asyncio
import logging
import threading
import os
import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from flask import Flask

# ==============================
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ==============================
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –∏–∑ Render env
MATCHES_URL = "https://hcdinamo.by/tickets/"
CHECK_INTERVAL = 300  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger("hockey_monitor")

# ==============================
# üöÄ Flask Web Server
# ==============================
app = Flask(__name__)

@app.route('/')
def index():
    return "‚úÖ Hockey Monitor Bot is running!"

# ==============================
# ü§ñ Telegram Bot
# ==============================
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

subscribers = set()
last_matches = set()

# ==============================
# üèí –ü–∞—Ä—Å–µ—Ä –º–∞—Ç—á–µ–π
# ==============================
def fetch_matches():
    try:
        response = requests.get(MATCHES_URL, timeout=15)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")

        matches = []
        for match in soup.select("a.match-item"):
            title = match.select_one(".match-title")
            date_day = match.select_one(".match-day")
            date_month = match.select_one(".match-month")
            time = match.select_one(".match-times")
            ticket_link = match.get("href")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–¥–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç
            title_text = title.get_text(strip=True) if title else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            date_text = f"{date_day.get_text(strip=True)} {date_month.get_text(strip=True)} {time.get_text(strip=True)}"
            full_link = ticket_link if ticket_link.startswith("http") else f"https://hcdinamo.by{ticket_link}"

            matches.append({
                "title": title_text,
                "date": date_text,
                "link": full_link
            })

        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")
        return matches
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π: {e}")
        return []

# ==============================
# üì¢ –ö–æ–º–∞–Ω–¥–∞ /start
# ==============================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    subscribers.add(message.chat.id)
    matches = fetch_matches()

    if not matches:
        await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫!\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π.\nüèí –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
        return

    text_lines = []
    for m in matches:
        text_lines.append(f"üìÖ <b>{m['date']}</b>\nüèí {m['title']}\nüéü <a href='{m['link']}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>")
    text = "\n\n".join(text_lines)

    await message.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫!\n\n{text}\n\nüèí –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")

# ==============================
# üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
# ==============================
async def monitor_matches():
    global last_matches
    await asyncio.sleep(5)

    while True:
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç—á–µ–π...")
            matches = fetch_matches()
            if not matches:
                logger.info("‚ùï –ù–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            else:
                current_set = {m['title'] for m in matches}

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ –∏–ª–∏ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –º–∞—Ç—á–∏)
                if current_set != last_matches:
                    added = current_set - last_matches
                    removed = last_matches - current_set
                    last_matches = current_set

                    text_parts = []
                    if added:
                        text_parts.append("‚ûï –ù–æ–≤—ã–µ –º–∞—Ç—á–∏:\n" + "\n".join(f"üèí {t}" for t in added))
                    if removed:
                        text_parts.append("‚ûñ –£–¥–∞–ª—ë–Ω–Ω—ã–µ –º–∞—Ç—á–∏:\n" + "\n".join(f"üö´ {t}" for t in removed))

                    if subscribers:
                        for chat_id in subscribers:
                            await bot.send_message(chat_id, "\n\n".join(text_parts))
                        logger.info(f"üìä –ò—Ç–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏: ‚úÖ {len(subscribers)}")
                    else:
                        logger.info("‚ùï –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
                else:
                    logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ monitor_matches: {e}")

        logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL // 60} –º–∏–Ω.")
        await asyncio.sleep(CHECK_INTERVAL)

# ==============================
# üöÄ –ó–∞–ø—É—Å–∫ Flask + Bot
# ==============================
def run_flask():
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 10000)))

async def main():
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å polling)
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("üåê Webhook —É–¥–∞–ª—ë–Ω, –≤–∫–ª—é—á–µ–Ω polling —Ä–µ–∂–∏–º.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_flask, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    asyncio.create_task(monitor_matches())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
