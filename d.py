import os
import time
import logging
import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.default import DefaultBotProperties
from bs4 import BeautifulSoup
from flask import Flask, jsonify

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")  # —Ç–æ–∫–µ–Ω –∏–∑ Environment Render
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # —Ç–≤–æ–π ID, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

URL = "https://hcdinamo.by/tickets/"
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://hockey-monitor.onrender.com{WEBHOOK_PATH}"

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === Flask –¥–ª—è Render health-check ===
app = Flask(__name__)

@app.route('/')
def index():
    return jsonify({"status": "ok", "service": "hockey-monitor"})

@app.route('/version')
def version():
    return jsonify({"version": "2.3.1 - SEPARATE_MESSAGES_FIX"})

# === Telegram bot ===
session = AiohttpSession()
bot = Bot(
    token=BOT_TOKEN,
    session=session,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)  # ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥ aiogram >= 3.7
)
dp = Dispatcher()

# === –ü–∞–º—è—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –º–∞—Ç—á–µ–π ===
subscribers = set()
last_matches = []


# === –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ ===
async def fetch_matches():
    async with aiohttp.ClientSession() as session:
        async with session.get(URL) as response:
            html = await response.text()

    soup = BeautifulSoup(html, 'html.parser')
    match_items = soup.select("a.match-item")
    logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ a.match-item: {len(match_items)}")

    matches = []
    for i, item in enumerate(match_items, start=1):
        day = item.select_one(".match-day").get_text(strip=True)
        month = item.select_one(".match-month").get_text(strip=True)
        time_ = item.select_one(".match-times").get_text(strip=True)
        title = item.select_one(".match-title").get_text(strip=True)
        ticket_div = item.select_one(".btn.tickets-w_t")
        ticket_url = ticket_div.get("data-w_t") if ticket_div else None

        match_text = (
            f"üìÖ {day} {month}\n"
            f"üèí {title}\n"
            f"üïí {time_}\n"
        )
        if ticket_url:
            match_text += f"üéü <a href='{ticket_url}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"

        matches.append(match_text)
        logging.info(f"üîç –ú–∞—Ç—á {i}: {day} {month} {time_} | {title}")

    return matches


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===
async def monitor_matches():
    global last_matches
    await asyncio.sleep(5)  # –ø–æ–¥–æ–∂–¥–∞—Ç—å –∑–∞–ø—É—Å–∫ Flask
    while True:
        try:
            logging.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞...")
            matches = await fetch_matches()

            if matches != last_matches:
                logging.info(f"‚ö° –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–∞—Ç—á–∞—Ö ({len(matches)} –Ω–∞–π–¥–µ–Ω–æ)")
                last_matches = matches
                await notify_all(matches)
            else:
                logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")

        logging.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL // 60} –º–∏–Ω.")
        await asyncio.sleep(CHECK_INTERVAL)


# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ===
async def notify_all(matches):
    if not subscribers:
        logging.info("‚ùï –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return

    success, failed = 0, 0
    for chat_id in subscribers:
        try:
            for match in matches:
                await bot.send_message(chat_id, match)
            success += 1
        except Exception as e:
            failed += 1
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

    logging.info(f"üìä –ò—Ç–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏: ‚úÖ {success} / ‚ùå {failed}")


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(CommandStart())
async def start(message: types.Message):
    chat_id = message.chat.id
    subscribers.add(chat_id)
    logging.info(f"üìù –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {chat_id}")

    await message.answer(
        "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫!\n\n"
        "üèí –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö."
    )

    matches = await fetch_matches()
    if matches:
        for match in matches:
            await bot.send_message(chat_id, match)
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π.")


# === –ó–∞–ø—É—Å–∫ ===
async def main():
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("üåê Webhook —É–¥–∞–ª—ë–Ω, –≤–∫–ª—é—á–µ–Ω polling —Ä–µ–∂–∏–º.")
    asyncio.create_task(monitor_matches())
    await dp.start_polling(bot)


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    app.run(host="0.0.0.0", port=10000)
