import os
import asyncio
import logging
import aiohttp
import re
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.default import DefaultBotProperties
from bs4 import BeautifulSoup
from flask import Flask, jsonify

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 300))
URL = "https://hcdinamo.by/tickets/"

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === Flask ===
app = Flask(__name__)

@app.route('/')
def index():
    return jsonify({"status": "ok", "service": "hockey-monitor"})

@app.route('/version')
def version():
    return jsonify({"version": "2.3.2 - FIXED_PARALLEL_RUN"})

# === Telegram bot ===
session = AiohttpSession()
bot = Bot(
    token=BOT_TOKEN,
    session=session,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# === –ü–∞–º—è—Ç—å ===
subscribers = set()
last_matches = []

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–µ—Å—è—Ü–µ–≤
MONTHS = {
    "—è–Ω–≤": "—è–Ω–≤–∞—Ä—è",
    "—Ñ–µ–≤": "—Ñ–µ–≤—Ä–∞–ª—è",
    "–º–∞—Ä": "–º–∞—Ä—Ç–∞",
    "–∞–ø—Ä": "–∞–ø—Ä–µ–ª—è",
    "–º–∞–π": "–º–∞—è",
    "–∏—é–Ω": "–∏—é–Ω—è",
    "–∏—é–ª": "–∏—é–ª—è",
    "–∞–≤–≥": "–∞–≤–≥—É—Å—Ç–∞",
    "—Å–µ–Ω": "—Å–µ–Ω—Ç—è–±—Ä—è",
    "–æ–∫—Ç": "–æ–∫—Ç—è–±—Ä—è",
    "–Ω–æ—è": "–Ω–æ—è–±—Ä—è",
    "–¥–µ–∫": "–¥–µ–∫–∞–±—Ä—è"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
WEEKDAYS = {
    "–ø–Ω": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "–≤—Ç": "–í—Ç–æ—Ä–Ω–∏–∫",
    "—Å—Ä": "–°—Ä–µ–¥–∞",
    "—á—Ç": "–ß–µ—Ç–≤–µ—Ä–≥",
    "–ø—Ç": "–ü—è—Ç–Ω–∏—Ü–∞",
    "—Å–±": "–°—É–±–±–æ—Ç–∞",
    "–≤—Å": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

async def fetch_matches():
    async with aiohttp.ClientSession() as session:
        async with session.get(URL) as resp:
            html = await resp.text()

    soup = BeautifulSoup(html, 'html.parser')
    match_items = soup.select("a.match-item")
    logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(match_items)}")

    matches = []
    for item in match_items:
        # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∞—Ç—ã
        day_elem = item.select_one(".match-day")
        month_elem = item.select_one(".match-month")
        weekday_elem = item.select_one(".match-weekday")  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∫–ª–∞—Å—Å
        time_elem = item.select_one(".match-times")
        title_elem = item.select_one(".match-title")
        ticket = item.select_one(".btn.tickets-w_t")
        ticket_url = ticket.get("data-w_t") if ticket else None

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
        day = day_elem.get_text(strip=True) if day_elem else "?"
        month = month_elem.get_text(strip=True).lower() if month_elem else "?"
        weekday = weekday_elem.get_text(strip=True).lower() if weekday_elem else "?"
        time_ = time_elem.get_text(strip=True) if time_elem else "?"
        title = title_elem.get_text(strip=True) if title_elem else "?"

        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"Raw date data: day={day}, month={month}, weekday={weekday}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã
        full_month = MONTHS.get(month, month.capitalize())  # –ï—Å–ª–∏ –º–µ—Å—è—Ü –Ω–µ –≤ —Å–ª–æ–≤–∞—Ä–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        full_weekday = WEEKDAYS.get(weekday, weekday.capitalize()) if weekday else ""

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        date_formatted = f"{day} {full_month}" if day != "?" and month != "?" else "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
        if full_weekday and weekday != "?":
            date_formatted += f", {full_weekday}"

        msg = (
            f"üìÖ {date_formatted}\n"
            f"üèí {title}\n"
            f"üïí {time_}\n"
        )
        if ticket_url:
            msg += f"üéü <a href='{ticket_url}'>–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"
        matches.append(msg)
    return matches

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===
async def monitor_matches():
    global last_matches
    await asyncio.sleep(5)
    while True:
        try:
            matches = await fetch_matches()
            if matches != last_matches:
                last_matches = matches
                await notify_all(matches)
            else:
                logging.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
        await asyncio.sleep(CHECK_INTERVAL)


# === –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
async def notify_all(matches):
    if not subscribers:
        logging.info("‚ùï –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return
    for chat_id in subscribers:
        for match in matches:
            try:
                await bot.send_message(chat_id, match)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    subscribers.add(message.chat.id)
    logging.info(f"üìù –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {message.chat.id}")
    await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö –î–∏–Ω–∞–º–æ –ú–∏–Ω—Å–∫! üèí")
    matches = await fetch_matches()
    if matches:
        for match in matches:
            await bot.send_message(message.chat.id, match)
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π.")


# === –ö–æ–º–∞–Ω–¥–∞ /stop ===
@dp.message(Command("stop"))
async def stop_cmd(message: types.Message):
    subscribers.discard(message.chat.id)
    await message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    logging.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –æ—Ç–ø–∏—Å–∞–ª—Å—è.")


# === –ó–∞–ø—É—Å–∫ aiogram –∏ Flask –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ===
async def run_aiogram():
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("üåê Webhook —É–¥–∞–ª—ë–Ω, –≤–∫–ª—é—á–µ–Ω polling —Ä–µ–∂–∏–º.")
    asyncio.create_task(monitor_matches())
    await dp.start_polling(bot)


def run_flask():
    app.run(host="0.0.0.0", port=10000)


async def main():
    loop = asyncio.get_event_loop()
    loop.run_in_executor(None, run_flask)  # üöÄ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    await run_aiogram()


if __name__ == '__main__':
    asyncio.run(main())
